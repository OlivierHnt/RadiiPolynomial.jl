var documenterSearchIndex = {"docs":
[{"location":"radii_polynomial_approach/#radii_polynomial_approach","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"Let X be a Banach space, U an open subset of X, T  U to X an operator, x_0 in U and R  0 such that textcl( B_R(x_0) ) subset U.","category":"page"},{"location":"radii_polynomial_approach/#first_order_RPT","page":"Radii polynomial approach","title":"First-order Radii Polynomial Theorem","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"Suppose T in C^1(U X) and Y Z_1 ge 0 satisfy","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"beginaligned\nT(x_0) - x_0_X le Y\nsup_x in textcl( B_R(x_0) ) DT(x)_mathscrB(X X) le Z_1\nendaligned","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"and define the radii polynomial by","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r) = Y + (Z_1 - 1) r","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"If there exists a radius r_0 in 0 R such that","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r_0) le 0 qquad textand qquad Z_1  1","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"then T has a unique fixed-point in textcl( B_r_0 (x_0) ).","category":"page"},{"location":"radii_polynomial_approach/#Second-order-Radii-Polynomial-Theorem","page":"Radii polynomial approach","title":"Second-order Radii Polynomial Theorem","text":"","category":"section"},{"location":"radii_polynomial_approach/#C1-condition","page":"Radii polynomial approach","title":"C^1 condition","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"Suppose T in C^1(U X) and Y Z_1 Z_2 ge 0 satisfy","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"beginaligned\nT(x_0) - x_0_X le Y\nDT(x_0)_mathscrB(X X) le Z_1\nDT(x) - DT(x_0)_mathscrB(X X) le Z_2 x - x_0 qquad textfor all  x in textcl( B_R(x_0) )\nendaligned","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"and define the radii polynomial by","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r) = Y + (Z_1 - 1) r + fracZ_22 r^2","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"If there exists a radius r_0 in 0 R such that","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r_0) le 0 qquad textand qquad Z_1 + Z_2 r_0  1","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"then T has a unique fixed-point in textcl( B_r_0 (x_0) ).","category":"page"},{"location":"radii_polynomial_approach/#C2_condition_RPT","page":"Radii polynomial approach","title":"C^2 condition","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"Suppose T in C^2(U X) and Y Z_1 Z_2 ge 0 satisfy","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"beginaligned\nT(x_0) - x_0_X le Y\nDT(x_0)_mathscrB(X X) le Z_1\nsup_x in textcl( B_R(x_0) ) D^2T(x)_mathscrB(X^2 X) le Z_2\nendaligned","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"and define the radii polynomial by","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r) = Y + (Z_1 - 1) r + fracZ_22 r^2","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"If there exists a radius r_0 in 0 R such that","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"p(r_0) le 0 qquad textand qquad Z_1 + Z_2 r_0  1","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"then T has a unique fixed-point in textcl( B_r_0 (x_0) ).","category":"page"},{"location":"radii_polynomial_approach/#Interval-of-existence","page":"Radii polynomial approach","title":"Interval of existence","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"The set of all possible radii is called the interval of existence.","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"The infimum of the interval of existence gives the sharpest computed a posteriori error bound on x_0. The supremum of the interval of existence represents the largest computed radius of the ball centred at x_0 within which the solution is unique.","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"The interval_of_existence method returns an Interval such that p is negative.","category":"page"},{"location":"radii_polynomial_approach/","page":"Radii polynomial approach","title":"Radii polynomial approach","text":"interval_of_existence","category":"page"},{"location":"radii_polynomial_approach/#RadiiPolynomial.interval_of_existence","page":"Radii polynomial approach","title":"RadiiPolynomial.interval_of_existence","text":"interval_of_existence(Y::Real, Z₁::Real, R::Real)\n\nReturn an interval of existence I subset 0 R such that Y + (Z_1 - 1) r le 0 and Z_1  1 for all r in I.\n\n\n\n\n\ninterval_of_existence(Y::Real, Z₁::Real, Z₂::Real, R::Real, ::C¹Condition)\n\nReturn an interval of existence I subset 0 R such that Y + (Z_1 - 1) r + Z_2 r^2  2 le 0 and Z_1 + Z_2 r  1 for all r in I.\n\n\n\n\n\ninterval_of_existence(Y::Real, Z₁::Real, Z₂::Real, R::Real, ::C²Condition)\n\nReturn the interval of existence I subset 0 R such that Y + (Z_1 - 1) r + Z_2 r^2  2 le 0 and Z_1 + Z_2 r  1 for all r in I.\n\n\n\n\n\n","category":"function"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/#Periodic-orbit-of-the-Lorenz-system","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"In this example, we will prove the existence of a periodic orbit of the Lorenz system","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"fracddt u(t) = f(u(t) sigma rho beta) =\nbeginpmatrix\nsigma(u_2(t) - u_1(t))\nu_1(t)(rho - u_3(t)) - u_2(t)\nu_1(t) u_2(t) - beta u_3(t)\nendpmatrix qquad sigma rho beta in mathbbR","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The vector field f and its derivative with respect to u, denoted Df, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"using RadiiPolynomial\n\nfunction f!(f, u, σ, ρ, β)\n    u₁, u₂, u₃ = eachcomponent(u)\n    project!(component(f, 1), σ*(u₂ - u₁))\n    project!(component(f, 2), u₁*(ρ - u₃) - u₂)\n    project!(component(f, 3), u₁*u₂ - β*u₃)\n    return f\nend\n\nfunction Df!(Df, u, σ, ρ, β)\n    u₁, u₂, u₃ = eachcomponent(u)\n    project!(component(Df, 1, 1), Multiplication(-σ*one(u₁)))\n    project!(component(Df, 1, 2), Multiplication(σ*one(u₂)))\n    project!(component(Df, 1, 3), Multiplication(zero(u₃)))\n    project!(component(Df, 2, 1), Multiplication(ρ-u₃))\n    project!(component(Df, 2, 2), Multiplication(-one(u₂)))\n    project!(component(Df, 2, 3), Multiplication(-u₁))\n    project!(component(Df, 3, 1), Multiplication(u₂))\n    project!(component(Df, 3, 2), Multiplication(u₁))\n    project!(component(Df, 3, 3), Multiplication(-β*one(u₃)))\n    return Df\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Let nu  1,","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"X_textnormalF = left u in mathbbC^mathbbZ    u_X_textnormalF = sum_k in mathbbZ u_k nu^k right","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"and *  X_textnormalF times X_textnormalF to X_textnormalF be the discrete convolution given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"u * v = left sum_l in mathbbZ u_k - l v_l right_k in mathbbZ qquad textfor all  u v in X_textnormalF","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"For any sequence u in X_textnormalF, the Fourier series sum_k in mathbbZ u_k e^i omega k t, for some frequency omega  0, defines an analytic 2piomega^-1-periodic function in C^omega(mathbbR mathbbC); while the discrete convolution * corresponds to the product of Fourier series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The Banach space X_textnormalF is a suitable space to represent each component of a periodic solution of the Lorenz system. Indeed, it is a standard result from ODE theory that analytic vector fields yield analytic solutions.[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"[1]: A. Hungria, J.-P. Lessard and J. D. Mireles James, Rigorous numerics for analytic solutions of differential equations: the radii polynomial approach, Mathematics of Computation, 85 (2016), 1427-1459.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Define the Banach space X = mathbbC times X_textnormalF^3 endowed with the norm x_X = max(gamma u_1_X_textnormalF u_2_X_textnormalF u_3_X_textnormalF) for all x = (gamma u_1 u_2 u_3) in X. It follows that the sequence of coefficients of a 2pigamma-periodic Fourier series solving the Lorenz equations is a zero of the mapping F  X to X given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"F(x) =\nbeginpmatrix\nsum_j = 1^3 (sum_k = -n^n (u_j)_k - xi_j)eta_j\nleft gamma ( f(u sigma rho beta) )_k - i k u_k right_k in mathbbZ\nendpmatrix qquad textfor all  x = (gamma u_1 u_2 u_3) in textdomain(F)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"where xi in mathbbR^3 is a chosen approximate position of the periodic orbit at t = 0 and eta in mathbbR^3 the corresponding approximate tangent vector at xi. By means of the phase condition sum_j = 1^3 (sum_k = -n^n (u_j)_k - xi_j)eta_j, the translation invariance of the periodic orbit is removed.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The mapping F and its Fréchet derivative, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"function F!(F, x, σ, ρ, β)\n    γ, u = x[1], component(x, 2)\n\n    F[1] =\n        (sum(component(u, 1)) - 10.205222700615433) * 24.600655549587863 +\n        (sum(component(u, 2)) - 11.899530531689562) * (-2.4927169722923335) +\n        (sum(component(u, 3)) - 27.000586375896557) * 71.81142025024573\n\n    project!(component(F, 2), γ * f!(component(F, 2), u, σ, ρ, β) - differentiate(u))\n\n    return F\nend\n\nfunction DF!(DF, x, σ, ρ, β)\n    γ, u = x[1], component(x, 2)\n\n    DF .= 0\n\n    component(component(DF, 1, 2), 1)[1,:] .= 24.600655549587863\n    component(component(DF, 1, 2), 2)[1,:] .= -2.4927169722923335\n    component(component(DF, 1, 2), 3)[1,:] .= 71.81142025024573\n\n    f!(component(DF, 2, 1), u, σ, ρ, β)\n\n    project!(component(DF, 2, 2), γ * Df!(component(DF, 2, 2), u, σ, ρ, β) - Derivative(1))\n\n    return DF\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Consider the fixed-point operator T  X to X defined by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"T(x) = x - A F(x)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"where A  X to X is an injective operator corresponding to an approximation of DF(barx)^-1 for some numerical zero barx = (bargamma baru_1 baru_2 baru_3) in X of F.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Given an initial guess, the numerical zero barx of F may be obtained by Newton's method:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"σ, ρ, β = 10.0, 28.0, 8/3\n\nn = 400\n\nx̄ = Sequence(ParameterSpace() × Fourier(n, 1.0)^3, zeros(ComplexF64, 1+3*(2n+1)))\nx̄[1] = 9.150971830259179/2π # γ, i.e. approximate inverse of the frequency\ncomponent(component(x̄, 2), 1)[0:14] =\n    [6.25, -0.66 - 1.45im, 0.6 - 1.2im, 1.11 - 0.26im, 0.77 + 0.57im,\n    0.08 + 0.76im, -0.35 + 0.45im, -0.39 + 0.13im, -0.37 - 0.0008im, -0.44 - 0.23im,\n    -0.18 - 0.68im, 0.65 - 0.61im, 0.80 + 0.50im, -0.53 + 0.43im, 1.25 - 0.07im]\ncomponent(component(x̄, 2), 2)[0:14] =\n    [6.25, -0.56 - 1.5im, 0.76 - 1.12im, 1.17 - 0.03im, 0.62 + 0.78im,\n    -0.18 + 0.76im,-0.54 + 0.3im, -0.45 - 0.06im, -0.37 - 0.2im, -0.3 - 0.51im,\n    0.29 - 0.8im, 1.11 - 0.13im, 0.4 + 1.16im, -0.91 - 0.05im, 1.31 + 1.13im]\ncomponent(component(x̄, 2), 3)[0:14] =\n    [24.45, -0.22 - 1.62im, 1.13 - 0.83im, 1.2 + 0.53im, 0.14 + 1.28im,\n    -1.03 + 0.75im, -1.14 - 0.52im, -0.08 - 1.21im, 0.98 - 0.57im, 0.79 + 0.59im,\n    -0.27 + 0.69im, -0.34 - 0.23im, 0.57 + 0.22im, -1.23 + 1.02im, 0.75 - 2.69im]\ncomponent(component(x̄, 2), 1)[-14:-1] .= conj.(component(component(x̄, 2), 1)[14:-1:1])\ncomponent(component(x̄, 2), 2)[-14:-1] .= conj.(component(component(x̄, 2), 2)[14:-1:1])\ncomponent(component(x̄, 2), 3)[-14:-1] .= conj.(component(component(x̄, 2), 3)[14:-1:1])\n\nnewton!((F, DF, x) -> (F!(F, x, σ, ρ, β), DF!(DF, x, σ, ρ, β)), x̄)\n\n# impose that x̄[1] is real and component(x̄, 2) are the coefficients of a real Fourier series\nx̄[1] = real(x̄[1])\nfor i ∈ 1:3\n    component(component(x̄, 2), i)[0] = real(component(component(x̄, 2), i)[0])\n    component(component(x̄, 2), i)[-n:-1] .= conj.(component(component(x̄, 2), i)[n:-1:1])\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Let R  0. Since T in C^2(X X) we may use the second-order Radii Polynomial Theorem with C^2 condition such that we need to estimate T(barx) - barx_X, DT(barx)_mathscrB(X X) and sup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X^2 X).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"To this end, consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"(pi^n u)_k =\nbegincases\nu_k  k le n\n0  k  n\nendcases\nqquad textnormalfor all  u in X_textnormalF","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Using the same symbol, this projection extends naturally to X_textnormalF^3 and X by acting on each component as follows pi^n u = (pi^n u_1 pi^n u_2 pi^n u_3), for all u = (u_1 u_2 u_3) in X_textnormalF^3, and pi^n x = (gamma pi^n u_1 pi^n u_2 pi^n u_3), for all x = (gamma u_1 u_2 u_3) in X. For each of the Banach spaces X_textnormalF X_textnormalF^3 X, we define the complementary operator pi^infty(n) = I - pi^n.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Thus, denoting baru = (baru_1 baru_2 baru_3), we have","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"beginaligned\nT(barx) - barx_X le\npi^n A pi^n F(barx)_X + fracbargamman+1  pi^infty(n) f(baru) _X_textnormalF^3\nDT(barx)_mathscrB(X X) le\npi^n A pi^n DF(barx) pi^2n - pi^n_mathscrB(X X) + frac1n+1  pi^infty(n) f(baru) _X_textnormalF^3 +\nqquad fracbargamman+1\nmax left(2 sigma 1 + baru_1_X_textnormalF + rho - baru_3_X_textnormalF beta + baru_1_X_textnormalF + baru_2_X_textnormalFright)\nsup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X^2 X) le\n2left(pi^n A pi^n_mathscrB(X X) + frac1n+1right) Big(bargamma + R +\nqquad max left(2 sigma 1 + rho + baru_1_X_textnormalF + baru_3_X_textnormalF + 2R beta + baru_1_X_textnormalF + baru_2_X_textnormalF + 2Rright)Big)\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"ν = Interval(1.01)\nX_F = ℓ¹(GeometricWeight(ν))\nX_F³ = NormedCartesianSpace(X_F, ℓ∞())\nX = NormedCartesianSpace((ℓ∞(), X_F³), ℓ∞())\nR = 1e-8\n\nσ_interval, ρ_interval, β_interval = Interval(10.0), Interval(28.0), 8.0/Interval(3.0)\n\nx̄_interval = Sequence(ParameterSpace() × Fourier(n, Interval(1.0))^3, Interval.(coefficients(x̄)))\nγ̄_interval = real(x̄_interval[1])\nū_interval = component(x̄_interval, 2)\n\nF_interval = Sequence(ParameterSpace() × Fourier(2n, Interval(1.0))^3, similar(coefficients(x̄_interval), 1+3*(4n+1)))\nF!(F_interval, x̄_interval, σ_interval, ρ_interval, β_interval)\n\ntail_f_interval = zero(component(F_interval, 2))\nfor i ∈ 1:3\n    component(tail_f_interval, i)[n+1:2n] .= component(component(F_interval, 2), i)[n+1:2n]\n    component(tail_f_interval, i)[-2n:-n-1] .= component(component(F_interval, 2), i)[-2n:-n-1]\nend\n\nDF_interval = LinearOperator(space(F_interval), space(x̄_interval), similar(coefficients(x̄_interval), length(x̄_interval), length(F_interval)))\nDF!(DF_interval, x̄_interval, σ_interval, ρ_interval, β_interval)\n\nA = inv(mid.(project(DF_interval, space(x̄_interval), space(x̄_interval))))\nbound_tail_A = inv(Interval(n+1))\n\n# computation of the bounds\n\nY = norm(A * F_interval, X) + bound_tail_A * γ̄_interval * norm(tail_f_interval, X_F³)\n\nZ₁ = opnorm(A * DF_interval - I, X) + bound_tail_A * norm(tail_f_interval, X_F³) +\n    bound_tail_A * γ̄_interval * max(2σ_interval,\n        1 + norm(component(ū_interval, 1), X_F) + norm(ρ_interval-component(ū_interval, 3), X_F),\n        β_interval + norm(component(ū_interval, 1), X_F) + norm(component(ū_interval, 2), X_F))\n\nZ₂ = (opnorm(Interval.(A), X) + bound_tail_A) * 2 * (γ̄_interval + R +\n    max(2σ_interval,\n        1 + ρ_interval + norm(component(ū_interval, 1), X_F) + norm(component(ū_interval, 3), X_F) + 2R,\n        β_interval + norm(component(ū_interval, 1), X_F) + norm(component(ū_interval, 2), X_F) + 2R))\n\nshowfull(interval_of_existence(Y, Z₁, Z₂, R, C²Condition()))","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The following animation[2] shows the numerical approximation of the proven periodic orbit (blue line) and the equilibria (red markers).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../lorenz_po.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/linear_operators/#Linear-operators","page":"Linear operators","title":"Linear operators","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A LinearOperator is a structure representing a linear operator from a VectorSpace to an other. More precisely, a LinearOperator is comprised of the three fields domain::VectorSpace, codomain::VectorSpace and coefficients::AbsractMatrix with matching dimensions and size.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A = LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The three fields domain, codomain and coefficients are accessible via the respective functions of the same name.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"domain(A)\ncodomain(A)\ncoefficients(A)","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The coefficients of a LinearOperator are indexed according to the indices of the domain and codomain (as given by indices).","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A[0:1,0:1] # indices(domain(A)), indices(codomain(A))","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"When the domain and/or the codomain of a LinearOperator is a CartesianSpace, its coefficients can be thought of as a block matrix . The function component extracts a LinearOperator composing the cartesian space.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"B = LinearOperator(ParameterSpace() × Taylor(1)^2, ParameterSpace() × Taylor(1)^2, reshape(1:25, 5, 5))\nB[1:5,1:5] # indices(domain(B)), indices(codomain(B))\ncomponent(B, 1, 1) # extract the linear operator associated with the domain ParameterSpace() and codomain ParameterSpace()\ncomponent(B, 2, 2) # extract the linear operator associated with the domain Taylor(1)^2 and codomain Taylor(1)^2\ncomponent(component(B, 2, 2), 1, 1)\ncomponent(component(B, 2, 2), 2, 2)","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"Similarly, the function eachcomponent returns a Generator whose iterates yield each LinearOperator composing the cartesian space.","category":"page"},{"location":"sequence_spaces/linear_operators/#Arithmetic","page":"Linear operators","title":"Arithmetic","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The addition and subtraction operations are implemented as the + and - functions respectively. Their bar counterparts add_bar (unicode alias +\\bar<tab>) and sub_bar (unicode alias -\\bar<tab>) give the result projected in the smallest compatible domain and codomain between the operands.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"C = LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])\nD = LinearOperator(Taylor(1), Taylor(2), [1 2 ; 3 4 ; 5 6])\nC + D\nC - D\nadd_bar(C, D) # project(C + D, Taylor(1), Taylor(1))\nsub_bar(C, D) # project(C - D, Taylor(1), Taylor(1))\nC + I\nC - I","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The product between LinearOperator is implemented as the * and ^ functions. The division between LinearOperator is implemented as the \\ method.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"C * D\nC ^ 3\nC \\ C","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The action of a LinearOperator is performed by the right product * of a LinearOperator with a Sequence; alternatively, LinearOperator defines a method on a Sequence representing *. Naturally, the resulting sequence is an element of the codomain of the LinearOperator.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"Conversely, the operator \\ between a LinearOperator and a Sequence corresponds to the action of the inverse of the LinearOperator; the output sequence is an element of the domain of the LinearOperator.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"x = Sequence(Taylor(2), [1, 1, 1])\nC * x # C(x)\nD \\ x","category":"page"},{"location":"sequence_spaces/linear_operators/#API","page":"Linear operators","title":"API","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"LinearOperator","category":"page"},{"location":"sequence_spaces/linear_operators/#RadiiPolynomial.LinearOperator","page":"Linear operators","title":"RadiiPolynomial.LinearOperator","text":"LinearOperator{T<:VectorSpace,S<:VectorSpace,R<:AbstractMatrix}\n\nCompactly supported linear operator with effective domain and codomain.\n\nFields:\n\ndomain :: T\ncodomain :: S\ncoefficients :: R\n\nConstructors:\n\nLinearOperator(::VectorSpace, ::VectorSpace, ::AbstractMatrix)\nLinearOperator(coefficients::AbstractMatrix): equivalent to LinearOperator(ParameterSpace()^size(coefficients, 2), ParameterSpace()^size(coefficients, 1), coefficients)\n\nExamples\n\njulia> LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])\nLinearOperator : Taylor(1) → Taylor(1) with coefficients Matrix{Int64}:\n 1  2\n 3  4\n\njulia> LinearOperator(Taylor(2), ParameterSpace(), [1.0 0.5 0.25])\nLinearOperator : Taylor(2) → 𝕂 with coefficients Matrix{Float64}:\n 1.0  0.5  0.25\n\njulia> LinearOperator([1 2 3 ; 4 5 6])\nLinearOperator : 𝕂³ → 𝕂² with coefficients Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\n\n\n\n","category":"type"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/#Initial-value-problem-of-the-logistic-equation","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"In this example, we will prove the existence of a solution of the logistic equation","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"begincases\ndisplaystyle fracddt u(t) = f(u(t)) = u(t)(1 - u(t))\nu(0) = 12\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Let nu  0,","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"X = left  x_alpha _alpha ge 0 in mathbbR^mathbbN cup 0     x _X = sum_alpha ge 0 x_alpha nu^alpha  +infty right","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"and *  X times X to X be the Cauchy product given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"x * y = left sum_beta = 0^alpha x_alpha - beta y_beta right_alpha ge 0 qquad textfor all  x y in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"For any sequence x in X, the Taylor series sum_alpha ge 0 x_alpha t^alpha defines an analytic function in C^omega(-nu nu mathbbR); while the Cauchy product * corresponds to the product of Taylor series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The Banach space X is a suitable space to represent a solution of the logistic equation. Indeed, it is a standard result from ODE theory that analytic vector fields yield analytic solutions.[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"[1]: A. Hungria, J.-P. Lessard and J. D. Mireles James, Rigorous numerics for analytic solutions of differential equations: the radii polynomial approach, Mathematics of Computation, 85 (2016), 1427-1459.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"It follows that the sequence of coefficients of a Taylor series solving the initial value problem is a zero of the mapping F  X to X given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"( F(x) )_alpha =\nbegincases\nx_0 - 12  alpha = 0\nalpha x_alpha - (x*(1 - x))_alpha-1  alpha ge 1\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The mapping F and its Fréchet derivative, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"using RadiiPolynomial\n\nfunction F!(F, x)\n    F[0] = x[0] - 0.5\n\n    v = differentiate(x) - x*(1 - x)\n    for α ∈ 1:order(F)\n        F[α] = v[α-1]\n    end\n\n    return F\nend\n\nfunction DF!(DF, x)\n    DF .= 0\n\n    DF[0,0] = 1\n\n    DF[1:end,:] .= Derivative(1) - project(Multiplication(1 - 2x), domain(DF), Taylor(order(codomain(DF))-1))\n\n    return DF\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Consider the fixed-point operator T  X to X defined by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"T(x) = x - A F(x)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"where A  X to X is an injective operator corresponding to an approximation of DF(barx)^-1 for some numerical zero barx in X of F.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Given an initial guess, the numerical zero barx of F may be obtained by Newton's method:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"n = 27\n\nx̄ = Sequence(Taylor(n), zeros(n+1))\n\nx̄, success = newton!((F, DF, x) -> (F!(F, x), DF!(DF, x)), x̄)\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Let R  0. Since T in C^2(X X) we may use the second-order Radii Polynomial Theorem with C^2 condition such that we need to estimate T(barx) - barx_X, DT(barx)_mathscrB(X X) and sup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X^2 X).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"To this end, consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"(pi^n x)_alpha =\nbegincases x_alpha  alpha le n\n0  alpha  n\nendcases qquad textfor all  x in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"as well as the complementary operator pi^infty(n) = I - pi^n.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Thus, we have","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"beginaligned\nT(barx) - barx_X le pi^n A pi^n F(barx)_X + frac1n+1 pi^infty(n) F(barx)_X\nDT(barx)_mathscrB(X X) le pi^n A pi^n DF(barx) pi^n - pi^n_mathscrB(X X) + fracnun+1 2barx - 1_X\nsup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X^2 X) le 2 nu left( pi^n A pi^n_mathscrB(X X) + frac1n+1 right)\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"In particular, from the latter estimate, we may freely choose R = infty.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"ν = Interval(2.0)\nX = ℓ¹(GeometricWeight(ν))\nR = Inf\n\nx̄_interval = Interval.(x̄)\n\nF_interval = Sequence(Taylor(2n+1), similar(coefficients(x̄_interval), 2n+2))\nF!(F_interval, x̄_interval)\n\ntail_F_interval = copy(F_interval)\ntail_F_interval[0:n] .= Interval(0.0)\n\nDF_interval = LinearOperator(Taylor(n), Taylor(n), similar(coefficients(x̄_interval), n+1, n+1))\nDF!(DF_interval, x̄_interval)\n\nA = inv(mid.(DF_interval))\nbound_tail_A = inv(Interval(n+1))\n\n# computation of the bounds\n\nY = norm(A * F_interval, X) + bound_tail_A * norm(tail_F_interval, X)\n\nZ₁ = opnorm(A * DF_interval - I, X) + bound_tail_A * ν * norm(2x̄_interval - 1, X)\n\nZ₂ = 2ν * (opnorm(Interval.(A), X) + bound_tail_A)\n\nshowfull(interval_of_existence(Y, Z₁, Z₂, R, C²Condition()))","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The following figure[2] shows the numerical approximation of the proven solution in the interval -2 2 along with the theoretical solution t mapsto (1 + e^-t)^-1.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"(Image: )","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/norms/#Norms","page":"Norms","title":"Norms","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"The choice of the Banach space to apply the Radii Polynomial Theorem (cf. Section Radii polynomial approach) is integral to the success of the computer-assisted proof. In practice, it is useful to tune the Banach space on the fly to adjust the norm estimates.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Accordingly, the spaces introduced in Section Vector spaces are not normed a priori. The norm of a Sequence or a LinearOperator is obtained via the functions norm and opnorm respectively; in both cases, one must specify a BanachSpace.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"BanachSpace\n├─ NormedCartesianSpace\n├─ Ell1\n├─ Ell2\n└─ EllInf","category":"page"},{"location":"sequence_spaces/norms/#\\ell1,-\\ell2-and-\\ell\\infty","page":"Norms","title":"ell^1, ell^2 and ell^infty","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Let mathscrI be a set of indices such that mathscrI subset mathbbZ^d for some d in mathbbN. Consider the weighted ell^1 ell^2 ell^infty spaces (cf. ell^p spaces) defined by","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"beginaligned\nell^1_w = left a in mathbbC^mathscrI     a _ell^1_w = sum_alpha in mathscrI a_alpha w(alpha)  +infty right \nell^2_w = left a in mathbbC^mathscrI     a _ell^2_w = sqrtsum_alpha in mathscrI a_alpha^2 w(alpha)  +infty right \nell^infty_w = left a in mathbbC^mathscrI     a _ell^infty_w = sup_alpha in mathscrI  a_alpha  w(alpha)  +infty right\nendaligned","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"where w  mathscrI to (0 +infty) is a weight function.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"The Banach spaces Ell1, Ell2 and EllInf wraps one or multiple Weight.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Weight\n├─ AlgebraicWeight\n├─ BesselWeight\n├─ GeometricWeight\n└─ IdentityWeight","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Given a set of indices mathscrI^prime subset mathbbZ:","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"an AlgebraicWeight of rate s ge 0 is defined by w(alpha) = (1 + alpha)^s for all alpha in mathscrI^prime.\na BesselWeight of rate s ge 0 is defined by w(alpha) = (1 + alpha)^s for all alpha in mathscrI^prime. This weight is specific to Ell2 and Fourier as it describes the Sobolev space H^s.\na GeometricWeight of rate nu  0 is defined by w(alpha) = nu^alpha for all alpha in mathscrI^prime.\nan IdentityWeight is defined by w(alpha) = 1 for all alpha in mathscrI^prime. This is the default weight for Ell1, Ell2 and EllInf.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Taylor(2), [1.0, 1.0, 1.0]); # 1 + x + x^2\nnorm(a, Ell1(AlgebraicWeight(1.0)))\nb = Sequence(Fourier(1, 1.0), [0.5, 0.0, 0.5]); # cos(x)\nnorm(b, Ell2(BesselWeight(2.0)))\nc = Sequence(Chebyshev(2), [1.0, 0.5, 0.5]); # 1 + 2(x/2 + (2x^2 - 1)/2)\nnorm(c, EllInf()) # EllInf() == EllInf(IdentityWeight())","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Note that ℓ¹ (\\ell<tab>\\^1<tab>), ℓ² (\\ell<tab>\\^2<tab>) and ℓ∞ (\\ell<tab>\\infty<tab>) are the respective unicode aliases of Ell1, Ell2 and EllInf.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"In the context of a d-dimensional TensorSpace, one prescribes weights w_1 dots w_d for each dimension. The weight is defined by w(alpha) = w_1(alpha_1) times dots times w_d(alpha_d) for all alpha = (alpha_1 dots alpha_d) in mathscrI^primeprime where mathscrI^primeprime subset mathbbZ^d is the appropriate set of indices.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Taylor(2) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(2), ones(3*5*3));\nnorm(a, Ell1((AlgebraicWeight(1.0), GeometricWeight(2.0), IdentityWeight())))","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"However, the d-dimensional version of BesselWeight is defined by w(alpha) = (1 + alpha_1 + dots + alpha_d)^s for all alpha = (alpha_1 dots alpha_d) in mathbbZ^d. Only one BesselWeight is required for every Fourier space composing the TensorSpace.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Fourier(2, 1.0) ⊗ Fourier(3, 1.0), ones(5*7));\nnorm(a, Ell2(BesselWeight(2.0)))","category":"page"},{"location":"sequence_spaces/norms/#Normed-cartesian-space","page":"Norms","title":"Normed cartesian space","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"For the norm of a CartesianSpace, one may use a NormedCartesianSpace to either:","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"use the same BanachSpace for each space.\nuse a different BanachSpace for each space.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Taylor(1)^2, [1.0, 2.0, 3.0, 4.0]);\nnorm(a, NormedCartesianSpace(ℓ¹(), ℓ∞()))\nnorm(a, NormedCartesianSpace((ℓ¹(), ℓ²()), ℓ∞()))","category":"page"},{"location":"sequence_spaces/norms/#API","page":"Norms","title":"API","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"BanachSpace\nnorm\nopnorm\nWeight\nIdentityWeight\nGeometricWeight\ngeometricweight\nAlgebraicWeight\nalgebraicweight\nBesselWeight\nEll1\nℓ¹\nEll2\nℓ²\nEllInf\nℓ∞\nNormedCartesianSpace","category":"page"},{"location":"sequence_spaces/norms/#RadiiPolynomial.BanachSpace","page":"Norms","title":"RadiiPolynomial.BanachSpace","text":"BanachSpace\n\nAbstract type for all Banach spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#LinearAlgebra.norm","page":"Norms","title":"LinearAlgebra.norm","text":"norm(a::Sequence, p::Real=Inf)\n\nCompute the p-norm of a. Only p equal to 1, 2 or Inf is supported.\n\nThis is equivalent to:\n\nnorm(a, Ell1(IdentityWeight())) if p == 1\nnorm(a, Ell2(IdentityWeight())) if p == 2\nnorm(a, EllInf(IdentityWeight())) if p == Inf\n\nSee also: norm(::Sequence, ::BanachSpace).\n\n\n\n\n\nnorm(a::Sequence, X::BanachSpace)\n\nCompute the norm of a by interpreting space(a) as X.\n\nSee also: norm(::Sequence, ::Real=Inf).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#LinearAlgebra.opnorm","page":"Norms","title":"LinearAlgebra.opnorm","text":"opnorm(A::LinearOperator, p::Real=Inf)\n\nCompute the operator norm of A induced by the p-norm. Only p equal to 1, 2 or Inf is supported.\n\nThis is equivalent to:\n\nopnorm(A, Ell1(IdentityWeight())) if p == 1\nopnorm(A, Ell2(IdentityWeight())) if p == 2\nopnorm(A, EllInf(IdentityWeight())) if p == Inf\n\nSee also: opnorm(::LinearOperator, ::BanachSpace), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator, X::BanachSpace, Y::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to domain(A) and Y the Banach space corresponding to codomain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator, X::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to both domain(A) and codomain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator{<:VectorSpace,ParameterSpace}, X::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to domain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator, ::BanachSpace).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Weight","page":"Norms","title":"RadiiPolynomial.Weight","text":"Weight\n\nAbstract type for all weights.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.IdentityWeight","page":"Norms","title":"RadiiPolynomial.IdentityWeight","text":"IdentityWeight <: Weight\n\nIdentity weight.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.GeometricWeight","page":"Norms","title":"RadiiPolynomial.GeometricWeight","text":"GeometricWeight{T<:Real} <: Weight\n\nGeometric weight associated with a given rate satisfying isfinite(rate) & (rate > 0).\n\nField:\n\nrate :: T\n\nSee also: geometricweight, IdentityWeight, AlgebraicWeight, algebraicweight and BesselWeight.\n\nExamples\n\njulia> w = GeometricWeight(1.0)\nGeometricWeight{Float64}(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.geometricweight","page":"Norms","title":"RadiiPolynomial.geometricweight","text":"geometricweight(a::Sequence{<:SequenceSpace})\n\nCompute an approximation of the geometric decay rate of a by performing the ordinary least squares method on the logarithm of the absolute value of the coefficients of a.\n\nSee also: GeometricWeight, IdentityWeight, AlgebraicWeight, algebraicweight and BesselWeight.\n\nExamples\n\njulia> rate(geometricweight(Sequence(Taylor(10), [inv(2.0^i) for i in 0:10]))) ≈ 2\ntrue\n\njulia> rate.(geometricweight(Sequence(Taylor(10) ⊗ Fourier(3, 1.0), vec([inv(2.0^i * 3.0^abs(j)) for i in 0:10, j in -3:3])))) .≈ (2, 3)\n(true, true)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.AlgebraicWeight","page":"Norms","title":"RadiiPolynomial.AlgebraicWeight","text":"AlgebraicWeight{T<:Real} <: Weight\n\nAlgebraic weight associated with a given rate satisfying isfinite(rate) & (rate ≥ 0).\n\nField:\n\nrate :: T\n\nSee also: algebraicweight, IdentityWeight, GeometricWeight, geometricweight and BesselWeight.\n\nExamples\n\njulia> w = AlgebraicWeight(1.0)\nAlgebraicWeight{Float64}(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.algebraicweight","page":"Norms","title":"RadiiPolynomial.algebraicweight","text":"algebraicweight(a::Sequence{<:SequenceSpace})\n\nCompute an approximation of the algebraic decay rate of a by performing the ordinary least squares method on the logarithm of the absolute value of the coefficients of a.\n\nSee also: AlgebraicWeight, IdentityWeight, GeometricWeight, geometricweight and BesselWeight.\n\nExamples\n\njulia> rate(algebraicweight(Sequence(Taylor(10), [inv((1.0 + i)^2) for i in 0:10]))) ≈ 2\ntrue\n\njulia> rate.(algebraicweight(Sequence(Taylor(10) ⊗ Fourier(3, 1.0), vec([inv((1.0 + i)^2 * (1.0 + abs(j))^3) for i in 0:10, j in -3:3])))) .≈ (2, 3)\n(true, true)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.BesselWeight","page":"Norms","title":"RadiiPolynomial.BesselWeight","text":"BesselWeight{T<:Real} <: Weight\n\nBessel weight associated with a given rate satisfying isfinite(rate) & (rate ≥ 0).\n\nField:\n\nrate :: T\n\nSee also: IdentityWeight, GeometricWeight, geometricweight, AlgebraicWeight and algebraicweight.\n\nExamples\n\njulia> w = BesselWeight(1.0)\nBesselWeight{Float64}(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Ell1","page":"Norms","title":"RadiiPolynomial.Ell1","text":"Ell1{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^1 space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEll1(::Weight)\nEll1(::Tuple{Vararg{Weight}})\nEll1(): equivalent to Ell1(IdentityWeight())\nEll1(weight::Weight...): equivalent to Ell1(weight)\n\nUnicode alias ℓ¹ can be typed by \\ell<tab>\\^1<tab> in the Julia REPL and in many editors.\n\nSee also: Ell2 and EllInf.\n\nExamples\n\njulia> Ell1()\nEll1{IdentityWeight}(IdentityWeight())\n\njulia> Ell1(GeometricWeight(1.0))\nEll1{GeometricWeight{Float64}}(GeometricWeight{Float64}(1.0))\n\njulia> Ell1(GeometricWeight(1.0), AlgebraicWeight(2.0))\nEll1{Tuple{GeometricWeight{Float64}, AlgebraicWeight{Float64}}}((GeometricWeight{Float64}(1.0), AlgebraicWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ¹","page":"Norms","title":"RadiiPolynomial.ℓ¹","text":"ℓ¹(::Weight)\nℓ¹(::Tuple{Vararg{Weight}})\nℓ¹()\nℓ¹(::Weight...)\n\nUnicode alias of Ell1 representing the weighted ell^1 space.\n\nExamples\n\njulia> ℓ¹()\nEll1{IdentityWeight}(IdentityWeight())\n\njulia> ℓ¹(GeometricWeight(1.0))\nEll1{GeometricWeight{Float64}}(GeometricWeight{Float64}(1.0))\n\njulia> ℓ¹(GeometricWeight(1.0), AlgebraicWeight(2.0))\nEll1{Tuple{GeometricWeight{Float64}, AlgebraicWeight{Float64}}}((GeometricWeight{Float64}(1.0), AlgebraicWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Ell2","page":"Norms","title":"RadiiPolynomial.Ell2","text":"Ell2{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^2 space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEll2(::Weight)\nEll2(::Tuple{Vararg{Weight}})\nEll2(): equivalent to Ell2(IdentityWeight())\nEll2(weight::Weight...): equivalent to Ell2(weight)\n\nUnicode alias ℓ² can be typed by \\ell<tab>\\^2<tab> in the Julia REPL and in many editors.\n\nSee also: Ell1 and EllInf.\n\nExamples\n\njulia> Ell2()\nEll2{IdentityWeight}(IdentityWeight())\n\njulia> Ell2(BesselWeight(1.0))\nEll2{BesselWeight{Float64}}(BesselWeight{Float64}(1.0))\n\njulia> Ell2(BesselWeight(1.0), GeometricWeight(2.0))\nEll2{Tuple{BesselWeight{Float64}, GeometricWeight{Float64}}}((BesselWeight{Float64}(1.0), GeometricWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ²","page":"Norms","title":"RadiiPolynomial.ℓ²","text":"ℓ²(::Weight)\nℓ²(::Tuple{Vararg{Weight}})\nℓ²()\nℓ²(::Weight...)\n\nUnicode alias of Ell2 representing the weighted ell^2 space.\n\nExamples\n\njulia> ℓ²()\nEll2{IdentityWeight}(IdentityWeight())\n\njulia> ℓ²(BesselWeight(1.0))\nEll2{BesselWeight{Float64}}(BesselWeight{Float64}(1.0))\n\njulia> ℓ²(BesselWeight(1.0), GeometricWeight(2.0))\nEll2{Tuple{BesselWeight{Float64}, GeometricWeight{Float64}}}((BesselWeight{Float64}(1.0), GeometricWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.EllInf","page":"Norms","title":"RadiiPolynomial.EllInf","text":"EllInf{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^infty space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEllInf(::Weight)\nEllInf(::Tuple{Vararg{Weight}})\nEllInf(): equivalent to EllInf(IdentityWeight())\nEllInf(weight::Weight...): equivalent to EllInf(weight)\n\nUnicode alias ℓ∞ can be typed by \\ell<tab>\\infty<tab> in the Julia REPL and in many editors.\n\nSee also: Ell1 and Ell2.\n\nExamples\n\njulia> EllInf()\nEllInf{IdentityWeight}(IdentityWeight())\n\njulia> EllInf(GeometricWeight(1.0))\nEllInf{GeometricWeight{Float64}}(GeometricWeight{Float64}(1.0))\n\njulia> EllInf(GeometricWeight(1.0), AlgebraicWeight(2.0))\nEllInf{Tuple{GeometricWeight{Float64}, AlgebraicWeight{Float64}}}((GeometricWeight{Float64}(1.0), AlgebraicWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ∞","page":"Norms","title":"RadiiPolynomial.ℓ∞","text":"ℓ∞(::Weight)\nℓ∞(::Tuple{Vararg{Weight}})\nℓ∞()\nℓ∞(::Weight...)\n\nUnicode alias of EllInf representing the weighted ell^infty space.\n\nExamples\n\njulia> ℓ∞()\nEllInf{IdentityWeight}(IdentityWeight())\n\njulia> ℓ∞(GeometricWeight(1.0))\nEllInf{GeometricWeight{Float64}}(GeometricWeight{Float64}(1.0))\n\njulia> ℓ∞(GeometricWeight(1.0), AlgebraicWeight(2.0))\nEllInf{Tuple{GeometricWeight{Float64}, AlgebraicWeight{Float64}}}((GeometricWeight{Float64}(1.0), AlgebraicWeight{Float64}(2.0)))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.NormedCartesianSpace","page":"Norms","title":"RadiiPolynomial.NormedCartesianSpace","text":"NormedCartesianSpace{T<:Union{BanachSpace,Tuple{Vararg{BanachSpace}}},S<:BanachSpace} <: BanachSpace\n\nCartesian Banach space.\n\nFields:\n\ninner :: T\nouter :: S\n\nSee also: Ell1, Ell2 and EllInf.\n\nExamples\n\njulia> NormedCartesianSpace(Ell1(), EllInf())\nNormedCartesianSpace{Ell1{IdentityWeight}, EllInf{IdentityWeight}}(Ell1{IdentityWeight}(IdentityWeight()), EllInf{IdentityWeight}(IdentityWeight()))\n\njulia> NormedCartesianSpace((Ell1(), Ell2()), EllInf())\nNormedCartesianSpace{Tuple{Ell1{IdentityWeight}, Ell2{IdentityWeight}}, EllInf{IdentityWeight}}((Ell1{IdentityWeight}(IdentityWeight()), Ell2{IdentityWeight}(IdentityWeight())), EllInf{IdentityWeight}(IdentityWeight()))\n\n\n\n\n\n","category":"type"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/#Unstable-manifolds-of-equilibria-of-the-cubic-Ikeda-equation","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"In this example, we will rigorously compute the unstable manifolds of the equilibria for the cubic Ikeda equation","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"fracddt u(t) = f(u(t) u(t-tau)) = u(t-tau) - u(t-tau)^3","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The linearization at some equilibrium c in mathbbR yields","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"fracddt v(t) = (1 - 3c^2) v(t-tau)","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The right-hand side of the above equation is an infinite dimensional endomorphism acting on C(-tau 0 mathbbR). Its compactness guarantees that the spectrum is comprised of eigenvalues accumulating at 0; in particular, there are finitely many eigenvalues whose real parts are strictly positive. As a matter of fact, an eigenvector xi in C(-tau 0 mathbbC) associated with an eigenvalue lambda in mathbbC is given by xi(s) = e^s lambda xi(0), for all s in -tau 0 and xi(0) neq 0, such that","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Psi(lambda) = lambda - (1 - 3c^2) e^-tau lambda = 0","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The characteristic function Psi and its derivative with respect to lambda, denoted DPsi, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Ψ(λ, c, τ) = λ - (1 - 3c^2) * exp(-τ*λ)\n\nDΨ(λ, c, τ) = 1 + τ * (1 - 3c^2) * exp(-τ*λ)\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the cubic Ikeda equation, the equilibria are 0, 1 or -1. For the equilibrium c = 0, there is a unique real unstable eigenvalue. While for the equilibria c = 1 and c = -1, there are two complex conjugate unstable eigenvalues.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the equilibrium c = 0, we may use the first-order Radii Polynomial Theorem to rigorously compute the unstable eigenvalue:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"using RadiiPolynomial\n\nλ̄₀, success = newton(λ -> (Ψ(λ, 0.0, 1.59), DΨ(λ, 0.0, 1.59)), 0.5)\n\nR = 1e-14\n\nτ = Interval(1.59)\n\nY = abs(Ψ(Interval(λ̄₀), 0.0, τ))\nZ₁ = abs(1 - DΨ(λ̄₀, 0.0, mid(τ)) \\ DΨ(λ̄₀ ± R, 0.0, τ))\nϵ₀ = inf(interval_of_existence(Y, Z₁, R))\nλ₀ = λ̄₀ ± ϵ₀\n\nshowfull(λ₀)","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, for the equilibria c = 1 and c = -1, we may use the same strategy to compute one of the two complex conjugate unstable eigenvalues:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"λ̄₁, success = newton(λ -> (Ψ(λ, 1.0, 1.59), DΨ(λ, 1.0, 1.59)), 0.3+1.0im)\n\nY = abs(Ψ(Interval(λ̄₁), 1.0, τ))\nZ₁ = abs(1 - DΨ(λ̄₁, 1.0, mid(τ)) \\ DΨ(complex(real(λ̄₁) ± R, imag(λ̄₁) ± R), 1.0, τ))\nϵ₁ = inf(interval_of_existence(Y, Z₁, R))\nλ₁ = complex(real(λ̄₁) ± ϵ₁, imag(λ̄₁) ± ϵ₁)\n\nshowfull(real(λ₁)); print(\" + \"); showfull(imag(λ₁)); println(\"im\")","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let lambda_1 dots lambda_d be the unstable eigenvalues and xi_1 dots xi_d the respective eigenvectors. Denote by Lambda  mathbbC^d to mathbbC^d the diagonal matrix such that Lambda_ii = lambda_i; also, denote by Xi  mathbbC^d to C(-tau 0 mathbbC) the matrix whose i-th column is the eigenvector xi_i.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"X = left  x_alpha _alpha_1 + ldots + alpha_d ge 0 in mathbbC^(mathbbN cup 0)^d     x _X = sum_alpha_1 + ldots + alpha_d ge 0 x_alpha  +infty right","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"and *  X times X to X be the Cauchy product given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"x * y = left sum_beta_1 + ldots + beta_d ge 0^alpha x_alpha - beta y_beta right_alpha_1 + ldots + alpha_d ge 0 qquad textfor all  x y in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For any sequence x in X, the Taylor series sum_alpha_1 + ldots + alpha_d ge 0 x_alpha sigma^alpha defines an analytic function in C^omega(mathbbD^d mathbbC) where mathbbD =  z in mathbbC    z le 1 ; while the Cauchy product * corresponds to the product of Taylor series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The Banach space X is a suitable space to represent a parameterization of the unstable manifold. Indeed, it is a standard result from DDE theory that analytic vector fields yield analytic unstable manifolds of equilibria. In the context of this example, it holds that the unstable manifold is parameterized by an analytic function P  mathbbC^d to C(-tau 0 mathbbC) satisfying fracdds P(sigma)(s) = DP(sigma) Lambda sigma(s) along with DP(sigma) Lambda sigma(0) = f(P (sigma)(0) P(sigma)(-tau)).[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"[1]: O. Hénot, J.-P. Lessard and J. D. Mireles James, Parameterization of unstable manifolds for DDEs: formal series solutions and validated error bounds, Journal of Dynamics and Differential Equations, 34 (2022), 1285-1324.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"In terms of the Taylor coefficients, the previous equalities yield","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"P(sigma)(s) = sum_alpha_1 + ldots + alpha_d ge 0 tildex_alpha e^s (alpha_1 lambda_1 + ldots + alpha_d lambda_d) sigma^alpha","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"where tildex in X is given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"tildex_alpha =\nbegincases\nc  alpha_1 = ldots = alpha_d = 0\nxi_1  alpha_1 = 1 alpha_2 = ldots = alpha_d = 0\nvdots\nxi_d  alpha_d = 1 alpha_1 = ldots = alpha_d-1 = 0\nPsi(alpha_1 lambda_1 + ldots + alpha_d lambda_d)^-1 left(-e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) tildex * tildex * tildex_tildex_alpha = 0right)_alpha  alpha_1 + ldots + alpha_d ge 2\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Observe that the unstable manifold of the equilibrium c = -1 is the same as the of the equilibrium c = 1 modulo a change of sign. Thus, we shall only study the unstable manifolds of the equilibria c = 0 and c = 1.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the equilibrium c = 0, we may implement the 1-dimensional recurrence relation as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"n₀ = 85\nx̃₀ = Sequence(Taylor(n₀), zeros(Interval{Float64}, n₀+1))\nx̃₀[1] = 5.0\nỹ₀ = copy(x̃₀)\nỹ₀[1] *= exp(-τ * λ₀)\nfor α ∈ 2:n₀\n    x̃₀[α] = -Ψ(α*λ₀, 0.0, τ) \\ pow_bar(Sequence(Taylor(α), view(ỹ₀, 0:α)), 3)[α]\n    ỹ₀[α] = x̃₀[α] * exp(-τ * α*λ₀)\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, for the equilibrium c = 1, we may implement the 2-dimensional recurrence relation as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"n₁ = 25\nx̃₁ = Sequence(Taylor(n₁) ⊗ Taylor(n₁), zeros(Complex{Interval{Float64}}, (n₁+1)^2))\nx̃₁[(0,0)] = 1.0\nx̃₁[(1,0)] = x̃₁[(0,1)] = 0.35\nỹ₁ = copy(x̃₁)\nỹ₁[(1,0)] *= exp(-τ * λ₁)\nỹ₁[(0,1)] *= exp(-τ * conj(λ₁))\nfor α₂ ∈ 0:n₁, α₁ ∈ 0:n₁-α₂\n    if α₁ + α₂ ≥ 2\n        x̃₁[(α₁,α₂)] = -Ψ(α₁*λ₁ + α₂*conj(λ₁), 1.0, τ) \\ pow_bar(Sequence(Taylor(α₁) ⊗ Taylor(α₂), view(ỹ₁, (0:α₁, 0:α₂))), 3)[(α₁,α₂)]\n        ỹ₁[(α₁,α₂)] = x̃₁[(α₁,α₂)] * exp(-τ * (α₁*λ₁ + α₂*conj(λ₁)))\n    end\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"(pi^n x)_alpha =\nbegincases x_alpha  alpha_1 + ldots + alpha_d le n\n0  alpha_1 + ldots + alpha_d  n\nendcases\nqquad textfor all  x in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"as well as the complementary operator pi^infty(n) = I - pi^n.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Given that pi^n tildex is a finite sequence of known Taylor coefficients, it follows that the remaining coefficients are a fixed-point of the mapping T  pi^infty(n) X to pi^infty(n) X given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"( T(h) )_alpha =\nbegincases\n0  alpha_1 + ldots + alpha_d le n\nPsi(alpha_1 lambda_1 + ldots + alpha_d lambda_d)^-1 left( -e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) (pi^n tildex +h)*(pi^n tildex +h)*(pi^n tildex +h)_h_alpha = 0 right)_alpha  alpha_1 + ldots + alpha_d  n\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let R  0. Since T in C^1(pi^infty(n) X pi^infty(n) X) we may use the first-order Radii Polynomial Theorem for which we use the estimates","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"beginaligned\nT(0)_X le max_mu in Re(lambda_1) dots Re(lambda_d) frac1(n+1)mu - 1 - 3c^2 e^-τ (n+1)mu pi^infty(n) (pi^n tildey*pi^n tildey*pi^n tildey)_X\nsup_h in textcl( B_R(0) ) DT(h)_mathscrB(X X) le max_mu in Re(lambda_1) dots Re(lambda_d) frac3(n+1)mu - 1 - 3c^2 e^-τ (n+1)mu (pi^n tildey_X + R)^2\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"where tildey = left tildex_alpha e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) right_alpha_1 + ldots + alpha_d ge 0.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The computer-assisted proof for the 1-dimensional unstable manifold of c = 0 may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"X = ℓ¹()\n\nR = 1e-12\n\ntail_ỹ₀³ = ỹ₀ ^ 3\ntail_ỹ₀³[0:n₀] .= 0\nC₀ = (n₀+1) * λ₀ - exp(-τ * (n₀+1) * λ₀)\n\nY = C₀ \\ norm(tail_ỹ₀³, X)\n\nZ₁ = C₀ \\ (3(norm(ỹ₀, X) + R)^2)\n\n# error bound for the Taylor coefficients of order α > 85 of the parameterization on the domain [-1, 1]\nshowfull(interval_of_existence(Y, Z₁, R))","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, the computer-assisted proof for the 2-dimensional unstable manifold of c = 1 may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"tail_ỹ₁³ = ỹ₁ ^ 3\nfor α₂ ∈ 0:n₁, α₁ ∈ 0:n₁-α₂\n    tail_ỹ₁³[(α₁,α₂)] = 0\nend\nC₁ = (n₁+1) * real(λ₁) - 2exp(-τ * (n₁+1) * real(λ₁))\n\nY = C₁ \\ norm(tail_ỹ₁³, X)\n\nZ₁ = C₁ \\ (3(norm(ỹ₁, X) + R)^2)\n\n# error bound for the Taylor coefficients of order α₁ + α₂ > 25 of the parameterization on the domain 𝔻²\nshowfull(interval_of_existence(Y, Z₁, R))","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The following animation[2] shows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"the equilibria 0 pm 1 (red markers).\nthe numerical approximation of the parameterization of the 1D unstable manifold of 0: on the domain of the computer-assisted proof -1 1 (green line) and on a larger domain (black line).\nthe numerical approximation of the parameterization of the 2D unstable manifold of pm 1: on the domain of the computer-assisted proof mathbbD^2 (blue surfaces) and on a larger domain (black wireframes).","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../ikeda_W_u.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/#Spiderweb-central-configurations","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"","category":"section"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"In this example, we will prove the existence and local uniqueness of a central configuration in the N-body problem.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"More precisely, we will look at configurations given by N = n times ell+1 masses located at the intersection points of ell concurrent equidistributed half-lines with n circles and a central mass m_0. The ell masses on the i-th circle are equal to a positive constant m_i and we allow the particular case m_0 = 0. These central configurations are called spiderweb central configurations.[1]","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"[1]: O. Hénot and C. Rousseau, Spiderweb central configurations, Qualitative Theory of Dynamical Systems, 18 (2019), 1135–1160.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The N-body problem consists in describing the positions mathbfr_1(t)dotsmathbfr_N(t) of N masses m_1dotsm_N interacting through Newton's gravitational law:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"m_i fracd^2dt^2 mathbfr_i\n=\n-sum_jneq i fracG m_i m_j(mathbfr_i - mathbfr_j) mathbfr_i - mathbfr_j ^3\n=\n-fracpartialpartial mathbfr_i U (mathbfr)\nqquad\nU (mathbfr)\n=\n-sum_ij fracG m_i m_jmathbfr_i - mathbfr_j","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"for i = 1dotsN, with mathbfr in  (mathbfr_1dotsmathbfr_N) in mathbbR^3N    mathbfr_i neq mathbfr_j   i neq j, where G denotes the gravitational constant.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"In the following, we fix the centre of mass at the origin and scale G = 1. Moreover, due to the symmetries of a spiderweb central configuration, it is sufficient to consider the accelerations of the n bodies on the positive horizontal axis, and the numbers r_1 dots r_n also denote the positions of the masses on this semi-axis.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The configuration of N bodies is central at some time t^* if fracd^2dt^2mathbfr(t^*) = lambda mathbfr(t^*) for some common lambda. It is easy to see that lambda is a strictly negative value given by lambda = U(mathbfr)I(mathbfr)  0 where I = sum_i = 1^N m_i mathbfr_i(mathbfr)^2 is the moment of inertia. Essentially, the value of lambda scales the system and can be chosen arbitrarily.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Then, the original system of ODEs reduces to the following system of equations in mathbbR^n:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"lambda r_i\n=\n-sum_k=1^ell-1 fracm_i2^32r_i^2(1 - cos(theta_k))^12 -fracm_0r_i^2 - sum_beginsmallmatrixj=1jneq i endsmallmatrix^n sum_k=0^ell-1 fracm_j(r_i - r_j cos(theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^32","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"for i = 1 dots n, with theta_k = frac2pi kell and r = (r_1dotsr_n) in mathbbR^n.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Thus, a spiderweb central configuration is a zero of the mapping F = (F_1 dots F_n)  mathbbR^n to mathbbR^n given by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"F_i(r) =\nlambda r_i + fracm_0r_i^2 + fracm_i2^32r_i^2zeta_ell + sum_beginsmallmatrixj = 1  j neq i endsmallmatrix^n sum_k=0^ell-1 fracm_j(r_i - r_j cos(theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^32  qquad i = 1 dots n","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"where zeta_ell = sum_k=1^ell-1 (1 - cos(theta_k))^-12.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The Jacobian matrix is given by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"fracpartialpartial r_j F_i(r) =\nbegincases\ndisplaystyle lambda - frac2m_0r_i^3 - fracm_ir_i^3sqrt2zeta_ell\n-sum_beginsmallmatrixj = 1  j neq iendsmallmatrix^n fracm_j2sum_k=0^ell-1\nfrac4r_i^2 + r_j^2 - 8 r_i r_j cos(theta_k) + 3 r_j^2 cos(2theta_k)(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^52  j = i\ndisplaystyle -fracm_j2 sum_k=0^ell-1\nfrac-4(r_i^2 + r_j^2) cos(theta_k) + r_i r_j (7 + cos(2theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^52  j neq i\nendcases","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The mapping F and its Jacobian, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"function F(x, m₀, m, λ, l)\n    T = eltype(x)\n    n = length(x)\n    π2l⁻¹ = 2convert(T, π)/l\n    F_ = Vector{T}(undef, n)\n    for i ∈ 1:n\n        F_[i] = λ*x[i] + m₀/x[i]^2\n        for k ∈ 1:l-1\n            θₖ = k*π2l⁻¹\n            F_[i] += m[i]/(2x[i]^2 * sqrt(2 - 2cos(θₖ)))\n        end\n        for j ∈ 1:n\n            if i ≠ j\n                for k ∈ 0:l-1\n                    θₖ = k*π2l⁻¹\n                    F_[i] += m[j]*(x[i] - x[j]*cos(θₖ))/sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^3\n                end\n            end\n        end\n    end\n    return F_\nend\n\nfunction DF(x, m₀, m, λ, l)\n    T = eltype(x)\n    n = length(x)\n    π2l⁻¹ = 2convert(T, π)/l\n    DF_ = zeros(T, n, n)\n    for j ∈ 1:n, i ∈ 1:n\n        if i == j\n            DF_[i,i] += λ - 2m₀/x[i]^3\n            for k ∈ 1:l-1\n                θₖ = k*π2l⁻¹\n                DF_[i,i] -= m[i]/(x[i]^3 * sqrt(2 - 2cos(θₖ)))\n            end\n        else\n            for k ∈ 0:l-1\n                θₖ = k*π2l⁻¹\n                DF_[i,i] -= m[j]*(4x[i]^2 + x[j]^2 - 8x[i]*x[j]*cos(θₖ) + 3x[j]^2*cos(2θₖ))/(2sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^5)\n                DF_[i,j] -= m[j]*(-4(x[i]^2 + x[j]^2)*cos(θₖ) + x[i]*x[j]*(7 + cos(2θₖ)))/(2sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^5)\n            end\n        end\n    end\n    return DF_\nend\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Consider the fixed-point operator T  mathbbR^n to mathbbR^n defined by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"T(x) = x - A F(x)","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"where A  mathbbR^n to mathbbR^n is the injective operator corresponding to a numerical approximation of DF(x_0)^-1 for some numerical zero x_0 in mathbbR^n of F.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Given an initial guess, the numerical zero x_0 of F may be obtained by Newton's method:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"using RadiiPolynomial\n\nn = 18 # number of circles\nl = 100 # number of masses per circle\n\nm₀ = 0.0 # central mass\nm = fill(1/l, n) # vector of masses\nλ = -1.0\n\nx₀ = collect(range(1.0; stop = 3.0, length = n))\n\nx₀, success = newton(x -> (F(x, m₀, m, λ, l), DF(x, m₀, m, λ, l)), x₀)\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Let R  0. According to the first-order Radii Polynomial Theorem, we need to estimate T(x_0) - x_0_infty and sup_x in textcl( B_R(x_0) ) DT(x)_infty which can be readily computed with interval arithmetic.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"R = 1e-12\n\nm₀_interval = Interval(0.0)\nm_interval = fill(inv(Interval(l)), n)\nλ_interval = Interval(-1.0)\n\nx₀_interval = Interval.(x₀)\nx₀R_interval = Interval.(inf.(x₀_interval .- R), sup.(x₀_interval .+ R))\n\nF_interval = F(x₀_interval, m₀_interval, m_interval, λ_interval, l)\nDF_interval = DF(x₀R_interval, m₀_interval, m_interval, λ_interval, l)\n\nA = inv(mid.(DF_interval))\n\nY = norm(Sequence(A * F_interval), Inf)\n\nZ₁ = opnorm(LinearOperator(A * DF_interval - I), Inf)\n\nshowfull(interval_of_existence(Y, Z₁, R))","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The following animation[2] shows the numerical approximation of the proven spiderweb central configuration for some given initial velocity.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../spiderweb.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/special_operators/#Special-operators","page":"Special operators","title":"Special operators","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"In this section, we present several operations common to dynamical systems.","category":"page"},{"location":"sequence_spaces/special_operators/#Projection","page":"Special operators","title":"Projection","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"When working with SequenceSpace, one frequently needs to adjust the order of truncation of the chosen basis. This operation is implemented as the project and project! functions. In fact, these functions provide a general mechanism to retrieve a finite part of the infinite dimensional operators introduced later in this section.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Each project or project! call verifies a compatibility criterion between spaces. For Sequence and LinearOperator, two VectorSpace are compatible if:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"all comprised SequenceSpace only differ from their order. For instance, Taylor(n) and Taylor(m) are compatible for any positive n::Int and m::Int. However, Taylor(n) and TensorSpace(Taylor(m), Fourier(k, 1.0)) are not compatible for any positive n::Int, m::Int and k::Int.\nall comprised CartesianSpace have the same number of cartesian products. For instance, CartesianPower(a, 2) and CartesianProduct(a, a) are compatible for any a::VectorSpace. However, CartesianProduct(a, b) and CartesianProduct(CartesianPower(a, 1), b) are not compatible for any a::VectorSpace and b::VectorSpace.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A = LinearOperator(Taylor(1) ⊗ Chebyshev(1), Taylor(1) ⊗ Chebyshev(1), [1 0 0 0 ; 0 1 0 0 ; 0 0 1 0 ; 0 0 0 1]) # project(I, Taylor(1) ⊗ Chebyshev(1), Taylor(1) ⊗ Chebyshev(1))\nproject(A, Taylor(1) ⊗ Chebyshev(2), Taylor(2) ⊗ Chebyshev(1))","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Moreover, the following identifications are permitted:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(1), [1, 1]) # 1 + x\nA = project(a, ParameterSpace(), Taylor(2))\nproject(A, space(a))","category":"page"},{"location":"sequence_spaces/special_operators/#Multiplication","page":"Special operators","title":"Multiplication","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Let V be a SequenceSpace with discrete convolution * and a in V. The multiplication operator Multiplication represents the mapping mathcalM_a  V to V defined by","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"mathcalM_a (b) = a * b qquad textfor all  b in V","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The action of Multiplication is performed by the right product * of a Multiplication with a Sequence{<:SequenceSpace}; alternatively, Multiplication defines a method on a Sequence{<:SequenceSpace} representing *.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(1), [1, 1]); # 1 + x\nb = Sequence(Taylor(2), [0, 0, 1]); # x^2\na * b\nℳ = Multiplication(a)\nℳ * b # ℳ(b)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Multiplication may be obtained via project or project!.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(ℳ, Taylor(2), image(*, Taylor(1), Taylor(2)))","category":"page"},{"location":"sequence_spaces/special_operators/#Derivation-and-integration","page":"Special operators","title":"Derivation and integration","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Both Derivative and Integral have a field order::Union{Int,Tuple{Vararg{Int}}} to specify how many times the operator is composed with itself. No derivation or integration is performed whenever a value of 0 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]); # 1 + x + x^2\ndifferentiate(a)\n𝒟 = Derivative(1)\n𝒟 * a # 𝒟(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Derivative and Integral may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Derivative(1), Taylor(2), image(Derivative(1), Taylor(2)), Float64)\nproject(Integral(1), Taylor(2), image(Integral(1), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Evaluation","page":"Special operators","title":"Evaluation","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The evaluation operator Evaluation has a field value::Union{Number,Nothing,Tuple{Vararg{Union{Number,Nothing}}}} representing the evaluation point. No scaling is performed whenever a value of nothing is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]); # 1 + x + x^2\nevaluate(a, 0.1)\nℰ = Evaluation(0.1)\nℰ * a # ℰ(a)\nb = Sequence(Taylor(1) ⊗ Fourier(1, 1.0), [0.5, 0.5, 0.0, 0.0, 0.5, 0.5]); # (1 + x) cos(y)\nevaluate(b, (0.1, nothing)) # Evaluation(0.1, nothing) * b","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Moreover, Evaluation is defined on CartesianSpace by acting component-wise.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"c = Sequence(Taylor(1)^2, [1, 1, 2, 2]); # 1 + x, 2 + 2x\nevaluate(c, 0.1) # Evaluation(0.1) * c","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Evaluation may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Evaluation(0.1), Taylor(2), image(Evaluation(0.1), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Furthermore, in the context of Evaluation, the concept of compatibility between two VectorSpace is more permissive to allow manipulating Evaluation more like a functional:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Evaluation(0.1), Taylor(2), ParameterSpace(), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Scale","page":"Special operators","title":"Scale","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The scale operator Scale has a field value::Union{Number,Tuple{Vararg{Number}}} representing the scaling factor. No scaling is performed whenever a value of 1 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"note: Note\nCurrently, only Taylor and Fourier spaces allow values different than 1.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]) # 1 + x + x^2\nscale(a, 2)\n𝒮 = Scale(2)\n𝒮 * a # 𝒮(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Scale may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Scale(2), Taylor(2), image(Scale(2), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Shift","page":"Special operators","title":"Shift","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The shift operator Shift has a field value::Union{Number,Tuple{Vararg{Number}}} representing the shift. No shift is performed whenever a value of 0 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"note: Note\nCurrently, only Fourier space allows values different than 0.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Fourier(1, 1.0), [0.5, 0.0, 0.5]) # cos(x)\nshift(a, π)\n𝒮 = Shift(π)\n𝒮 * a # 𝒮(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Shift may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Shift(π), Fourier(1, 1.0), image(Shift(π), Fourier(1, 1.0)), Complex{Float64})","category":"page"},{"location":"sequence_spaces/special_operators/#API","page":"Special operators","title":"API","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project\nproject!\nMultiplication\nDerivative\ndifferentiate\ndifferentiate!\nIntegral\nintegrate\nintegrate!\nEvaluation\nevaluate\nevaluate!\nScale\nscale\nscale!\nShift\nshift\nshift!","category":"page"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.project","page":"Special operators","title":"RadiiPolynomial.project","text":"project(a::Sequence, space_dest::VectorSpace, ::Type{T}=eltype(a))\n\nRepresent a as a Sequence in space_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(A::LinearOperator{ParameterSpace,<:VectorSpace}, space_dest::VectorSpace, ::Type{T}=eltype(A))\n\nRepresent A as a Sequence in space_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(J::UniformScaling, domain_dest::VectorSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(J))\n\nRepresent J as a LinearOperator from domain_dest to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(A::LinearOperator, domain_dest::VectorSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(A))\n\nRepresent A as a LinearOperator from domain_dest to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(a::Sequence, ::ParameterSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(a))\n\nRepresent a as a LinearOperator from ParameterSpace to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(ℳ::Multiplication, domain::SequenceSpace, codomain::SequenceSpace, ::Type{T}=eltype(ℳ.sequence))\n\nRepresent ℳ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ::Multiplication) and Multiplication.\n\n\n\n\n\nproject(𝒟::Derivative, domain::VectorSpace, codomain::VectorSpace, ::Type{T})\n\nRepresent 𝒟 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Derivative) and Derivative.\n\n\n\n\n\nproject(ℐ::Integral, domain::VectorSpace, codomain::VectorSpace, ::Type{T})\n\nRepresent ℐ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Integral) and Integral.\n\n\n\n\n\nproject(ℰ::Evaluation, domain::VectorSpace, codomain::VectorSpace, ::Type{T})\n\nRepresent ℰ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Evaluation) and Evaluation.\n\n\n\n\n\nproject(𝒮::Scale, domain::VectorSpace, codomain::VectorSpace, ::Type{T})\n\nRepresent 𝒮 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Scale) and Scale\n\n\n\n\n\nproject(𝒮::Shift, domain::VectorSpace, codomain::VectorSpace, ::Type{T})\n\nRepresent 𝒮 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Shift) and Shift.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.project!","page":"Special operators","title":"RadiiPolynomial.project!","text":"project!(c::Sequence, a::Sequence)\n\nRepresent a as a Sequence in space(c). The result is stored in c by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(c::Sequence, A::LinearOperator{ParameterSpace,<:VectorSpace})\n\nRepresent A as a Sequence in space(c). The result is stored in c by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator, J::UniformScaling)\n\nRepresent J as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator, A::LinearOperator)\n\nRepresent A as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator{ParameterSpace,<:VectorSpace}, a::Sequence)\n\nRepresent a as a LinearOperator from ParameterSpace to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ℳ::Multiplication)\n\nRepresent ℳ as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(ℳ::Multiplication, ::SequenceSpace, ::SequenceSpace, ::Type{T}=eltype(ℳ.sequence)) where {T} and Multiplication.\n\n\n\n\n\nproject!(C::LinearOperator, 𝒟::Derivative)\n\nRepresent 𝒟 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Derivative, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and Derivative.\n\n\n\n\n\nproject!(C::LinearOperator, ℐ::Integral)\n\nRepresent ℐ as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Integral, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and Integral\n\n\n\n\n\nproject!(C::LinearOperator, ℰ::Evaluation)\n\nRepresent ℰ as a LinearOperator from domain to codomain. The result is stored in C by overwriting it.\n\nSee also: project(::Evaluation, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and Evaluation.\n\n\n\n\n\nproject!(C::LinearOperator, 𝒮::Scale)\n\nRepresent 𝒮 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Scale, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and Scale\n\n\n\n\n\nproject!(C::LinearOperator, 𝒮::Shift)\n\nRepresent 𝒮 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Shift, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and Shift.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Multiplication","page":"Special operators","title":"RadiiPolynomial.Multiplication","text":"Multiplication{T<:Sequence{<:SequenceSpace}} <: SpecialOperator\n\nMultiplication operator associated with a given Sequence.\n\nField:\n\nsequence :: T\n\nConstructor:\n\nMultiplication(::Sequence{<:SequenceSpace})\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), project(ℳ::Multiplication, ::SequenceSpace, ::SequenceSpace, ::Type{T}=eltype(ℳ.sequence)) where {T}, project!(::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ::Multiplication) and Multiplication.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Derivative","page":"Special operators","title":"RadiiPolynomial.Derivative","text":"Derivative{T<:Union{Int,Tuple{Vararg{Int}}}} <: SpecialOperator\n\nGeneric derivative operator.\n\nField:\n\norder :: T\n\nConstructors:\n\nDerivative(::Int)\nDerivative(::Tuple{Vararg{Int}})\nDerivative(order::Int...): equivalent to Derivative(order)\n\nSee also: differentiate, differentiate!, project(::Derivative, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and project!(::LinearOperator, ::Derivative).\n\nExamples\n\njulia> Derivative(1)\nDerivative{Int64}(1)\n\njulia> Derivative(1, 2)\nDerivative{Tuple{Int64, Int64}}((1, 2))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.differentiate","page":"Special operators","title":"RadiiPolynomial.differentiate","text":"differentiate(a::Sequence, α=1)\n\nCompute the α-th derivative of a.\n\nSee also: differentiate!, Derivative, *(::Derivative, ::Sequence) and (::Derivative)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.differentiate!","page":"Special operators","title":"RadiiPolynomial.differentiate!","text":"differentiate!(c::Sequence, a::Sequence, α=1)\n\nCompute the α-th derivative of a. The result is stored in c by overwriting it.\n\nSee also: differentiate, Derivative, *(::Derivative, ::Sequence) and (::Derivative)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Integral","page":"Special operators","title":"RadiiPolynomial.Integral","text":"Integral{T<:Union{Int,Tuple{Vararg{Int}}}} <: SpecialOperator\n\nGeneric integral operator.\n\nField:\n\norder :: T\n\nConstructors:\n\nIntegral(::Int)\nIntegral(::Tuple{Vararg{Int}})\nIntegral(order::Int...): equivalent to Integral(order)\n\nSee also: integrate, integrate!, project(::Integral, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and project!(::LinearOperator, ::Integral).\n\nExamples\n\njulia> Integral(1)\nIntegral{Int64}(1)\n\njulia> Integral(1, 2)\nIntegral{Tuple{Int64, Int64}}((1, 2))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.integrate","page":"Special operators","title":"RadiiPolynomial.integrate","text":"integrate(a::Sequence, α=1)\n\nCompute the α-th integral of a.\n\nSee also: integrate!, Integral, *(::Integral, ::Sequence) and (::Integral)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.integrate!","page":"Special operators","title":"RadiiPolynomial.integrate!","text":"integrate!(c::Sequence, a::Sequence, α=1)\n\nCompute the α-th integral of a. The result is stored in c by overwriting it.\n\nSee also: integrate, Integral, *(::Integral, ::Sequence) and (::Integral)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Evaluation","page":"Special operators","title":"RadiiPolynomial.Evaluation","text":"Evaluation{T<:Union{Nothing,Number,Tuple{Vararg{Union{Nothing,Number}}}}} <: SpecialOperator\n\nGeneric evaluation operator. A value of nothing indicates that no evaluation should be performed.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nEvaluation(::Union{Nothing,Number})\nEvaluation(::Tuple{Vararg{Union{Nothing,Number}}})\nEvaluation(value::Union{Number,Nothing}...): equivalent to Evaluation(value)\n\nSee also: evaluate, evaluate!, project(::Evaluation, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and project!(::LinearOperator, ::Evaluation).\n\nExamples\n\njulia> Evaluation(1.0)\nEvaluation{Float64}(1.0)\n\njulia> Evaluation(1.0, nothing, 2.0)\nEvaluation{Tuple{Float64, Nothing, Float64}}((1.0, nothing, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.evaluate","page":"Special operators","title":"RadiiPolynomial.evaluate","text":"evaluate(a::Sequence, x)\n\nEvaluate a at x.\n\nSee also: (::Sequence)(::Any, ::Vararg), evaluate!, Evaluation, *(::Evaluation, ::Sequence) and (::Evaluation)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.evaluate!","page":"Special operators","title":"RadiiPolynomial.evaluate!","text":"evaluate!(c::Sequence, a::Sequence, x)\n\nEvaluate a at x. The result is stored in c by overwriting it.\n\nSee also: (::Sequence)(::Any, ::Vararg), evaluate, Evaluation, *(::Evaluation, ::Sequence) and (::Evaluation)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Scale","page":"Special operators","title":"RadiiPolynomial.Scale","text":"Scale{T<:Union{Number,Tuple{Vararg{Number}}}} <: SpecialOperator\n\nGeneric scale operator.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nScale(::Number)\nScale(::Tuple{Vararg{Number}})\nScale(value::Number...): equivalent to Scale(value)\n\nSee also: scale, scale!, project(::Scale, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and project!(::LinearOperator, ::Scale).\n\nExamples\n\njulia> Scale(1.0)\nScale{Float64}(1.0)\n\njulia> Scale(1.0, 2.0)\nScale{Tuple{Float64, Float64}}((1.0, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.scale","page":"Special operators","title":"RadiiPolynomial.scale","text":"scale(a::Sequence, γ)\n\nScale a by a factor γ.\n\nSee also: scale!, Scale, *(::Scale, ::Sequence) and (::Scale)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.scale!","page":"Special operators","title":"RadiiPolynomial.scale!","text":"scale!(c::Sequence, a::Sequence, γ)\n\nScale a by a factor γ. The result is stored in c by overwriting it.\n\nSee also: scale, Scale, *(::Scale, ::Sequence) and (::Scale)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Shift","page":"Special operators","title":"RadiiPolynomial.Shift","text":"Shift{T<:Union{Number,Tuple{Vararg{Number}}}} <: SpecialOperator\n\nGeneric shift operator.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nShift(::Number)\nShift(::Tuple{Vararg{Number}})\nShift(value::Number...): equivalent to Shift(value)\n\nSee also: shift, shift!, project(::Shift, ::VectorSpace, ::VectorSpace, ::Type{T}) where {T} and project!(::LinearOperator, ::Shift).\n\nExamples\n\njulia> Shift(1.0)\nShift{Float64}(1.0)\n\njulia> Shift(1.0, 2.0)\nShift{Tuple{Float64, Float64}}((1.0, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.shift","page":"Special operators","title":"RadiiPolynomial.shift","text":"shift(a::Sequence, τ)\n\nShift a by τ.\n\nSee also: shift!, Shift, *(::Shift, ::Sequence) and (::Shift)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.shift!","page":"Special operators","title":"RadiiPolynomial.shift!","text":"shift!(c::Sequence, a::Sequence, τ)\n\nShift a by τ. The result is stored in c by overwriting it.\n\nSee also: shift, Shift, *(::Shift, ::Sequence) and (::Shift)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/vector_spaces/#vector_spaces","page":"Vector spaces","title":"Vector spaces","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"RadiiPolynomial defines a variety of vector spaces to represent the Banach space on which one applies the Radii Polynomial Theorem.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"All spaces mentioned below are a subtype of the abstract type VectorSpace.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"VectorSpace\n├─ CartesianSpace\n│  ├─ CartesianPower\n│  └─ CartesianProduct\n├─ ParameterSpace\n└─ SequenceSpace\n   ├─ BaseSpace\n   │  ├─ Chebyshev\n   │  ├─ Fourier\n   │  └─ Taylor\n   └─ TensorSpace","category":"page"},{"location":"sequence_spaces/vector_spaces/#Parameter-space","page":"Vector spaces","title":"Parameter space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A ParameterSpace represents the commutative field of a parameter. This is the standard space to use for an unfolding parameter.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒫 = ParameterSpace()\ndimension(𝒫)\nindices(𝒫)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Sequence-space","page":"Vector spaces","title":"Sequence space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"SequenceSpace is the abstract type for all sequence spaces.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"SequenceSpace\n├─ BaseSpace\n│  ├─ Chebyshev\n│  ├─ Fourier\n│  └─ Taylor\n└─ TensorSpace","category":"page"},{"location":"sequence_spaces/vector_spaces/#BaseSpace","page":"Vector spaces","title":"BaseSpace","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"BaseSpace is the abstract type for all sequence spaces that are not a TensorSpace but can be interlaced to form one.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"BaseSpace\n├─ Chebyshev\n├─ Fourier\n└─ Taylor","category":"page"},{"location":"sequence_spaces/vector_spaces/#Taylor","page":"Vector spaces","title":"Taylor","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n, a Taylor sequence space is the span of phi_0 dots phi_n where phi_k(t) = t^k for k = 0 dots n and t in -nu nu for some appropriate nu  0.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯 = Taylor(1)\norder(𝒯)\ndimension(𝒯)\nindices(𝒯)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Fourier","page":"Vector spaces","title":"Fourier","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n and frequency omega, a Fourier sequence space is the span of phi_-n dots phi_n where phi_k(t) = e^i omega k t for k = -n dots n and t in mathbbR2piomega^-1mathbbZ.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"ℱ = Fourier(1, 1.0)\norder(ℱ)\nfrequency(ℱ)\ndimension(ℱ)\nindices(ℱ)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Chebyshev","page":"Vector spaces","title":"Chebyshev","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n, a Chebyshev sequence space is the span of phi_0 phi_1 dots phi_n where phi_0(t) = 1, phi_1(t) = t and phi_k(t) = 2 t phi_k-1(t) - phi_k-2(t) for k = 2 dots n and t in -1 1.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"It is important to note that the coefficients a_0 a_1 dots a_n associated with a Chebyshev space are normalized such that a_0 2a_1 dots 2a_n are the actual Chebyshev coefficients.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒞 = Chebyshev(1)\norder(𝒞)\ndimension(𝒞)\nindices(𝒞)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Tensor-space","page":"Vector spaces","title":"Tensor space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A TensorSpace is the tensor product of some BaseSpace. The standard constructor for TensorSpace is the ⊗ (\\otimes<tab>) operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯_otimes_ℱ_otimes_𝒞 = Taylor(1) ⊗ Fourier(1, 1.0) ⊗ Chebyshev(1) # TensorSpace((Taylor(1), Fourier(1, 1.0), Chebyshev(1)))\nnspaces(𝒯_otimes_ℱ_otimes_𝒞)\norder(𝒯_otimes_ℱ_otimes_𝒞)\nfrequency(𝒯_otimes_ℱ_otimes_𝒞, 2)\ndimension(𝒯_otimes_ℱ_otimes_𝒞)\ndimensions(𝒯_otimes_ℱ_otimes_𝒞)\nindices(𝒯_otimes_ℱ_otimes_𝒞)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-space","page":"Vector spaces","title":"Cartesian space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"CartesianSpace is the abstract type for all cartesian spaces.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"CartesianSpace\n├─ CartesianPower\n└─ CartesianProduct","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-power","page":"Vector spaces","title":"Cartesian power","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A CartesianPower is the cartesian product of an identical VectorSpace. The standard constructor for CartesianPower is the ^ operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯² = Taylor(1) ^ 2 # CartesianPower(Taylor(1), 2)\nnspaces(𝒯²)\ndimension(𝒯²)\nindices(𝒯²)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-product","page":"Vector spaces","title":"Cartesian product","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A CartesianProduct is the cartesian product of some VectorSpace. The standard constructor for CartesianProduct is the × (\\times<tab>) operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒫_times_𝒯 = ParameterSpace() × Taylor(1) # CartesianProduct((ParameterSpace(), Taylor(1)))\nnspaces(𝒫_times_𝒯)\ndimension(𝒫_times_𝒯)\nindices(𝒫_times_𝒯)","category":"page"},{"location":"sequence_spaces/vector_spaces/#API","page":"Vector spaces","title":"API","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"VectorSpace\nParameterSpace\nSequenceSpace\nBaseSpace\nTaylor\nFourier\nChebyshev\nTensorSpace\nTensorIndices\n⊗\nCartesianSpace\nCartesianPower\nRadiiPolynomial.:^\nCartesianProduct\nRadiiPolynomial.:×","category":"page"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.VectorSpace","page":"Vector spaces","title":"RadiiPolynomial.VectorSpace","text":"VectorSpace\n\nAbstract type for all vector spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.ParameterSpace","page":"Vector spaces","title":"RadiiPolynomial.ParameterSpace","text":"ParameterSpace <: VectorSpace\n\nParameter space corresponding to a commutative field.\n\nExample\n\njulia> ParameterSpace()\n𝕂\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.SequenceSpace","page":"Vector spaces","title":"RadiiPolynomial.SequenceSpace","text":"SequenceSpace <: VectorSpace\n\nAbstract type for all sequence spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.BaseSpace","page":"Vector spaces","title":"RadiiPolynomial.BaseSpace","text":"BaseSpace <: SequenceSpace\n\nAbstract type for all sequence spaces that are not a TensorSpace but can be interlaced to form one.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Taylor","page":"Vector spaces","title":"RadiiPolynomial.Taylor","text":"Taylor <: BaseSpace\n\nTaylor sequence space whose elements are Taylor sequences of a prescribed order.\n\nField:\n\norder :: Int\n\nConstructor:\n\nTaylor(::Int)\n\nSee also: Fourier and Chebyshev.\n\nExamples\n\njulia> s = Taylor(2)\nTaylor(2)\n\njulia> order(s)\n2\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Fourier","page":"Vector spaces","title":"RadiiPolynomial.Fourier","text":"Fourier{T<:Real} <: BaseSpace\n\nFourier sequence space whose elements are Fourier sequences of a prescribed order and frequency.\n\nFields:\n\norder :: Int\nfrequency :: T\n\nConstructor:\n\nFourier(::Int, ::Real)\n\nSee also: Taylor and Chebyshev.\n\nExamples\n\njulia> s = Fourier(2, 1.0)\nFourier{Float64}(2, 1.0)\n\njulia> order(s)\n2\n\njulia> frequency(s)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Chebyshev","page":"Vector spaces","title":"RadiiPolynomial.Chebyshev","text":"Chebyshev <: BaseSpace\n\nChebyshev sequence space whose elements are Chebyshev sequences of a prescribed order.\n\nField:\n\norder :: Int\n\nConstructor:\n\nChebyshev(::Int)\n\nSee also: Taylor and Fourier.\n\nExamples\n\njulia> s = Chebyshev(2)\nChebyshev(2)\n\njulia> order(s)\n2\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.TensorSpace","page":"Vector spaces","title":"RadiiPolynomial.TensorSpace","text":"TensorSpace{T<:Tuple{Vararg{BaseSpace}}} <: SequenceSpace\n\nTensor space resulting from the tensor product of some BaseSpace.\n\nField:\n\nspaces :: T\n\nConstructors:\n\nTensorSpace(::Tuple{Vararg{BaseSpace}})\nTensorSpace(spaces::BaseSpace...): equivalent to TensorSpace(spaces)\n⊗(s₁::BaseSpace, s₂::BaseSpace): equivalent to TensorSpace((s₁, s₂))\n⊗(s₁::TensorSpace, s₂::TensorSpace): equivalent to TensorSpace((s₁.spaces..., s₂.spaces...))\n⊗(s₁::TensorSpace, s₂::BaseSpace): equivalent to TensorSpace((s₁.spaces..., s₂))\n⊗(s₁::BaseSpace, s₂::TensorSpace): equivalent to TensorSpace((s₁, s₂.spaces...))\n\nSee also: ⊗.\n\nExamples\n\njulia> s = TensorSpace(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\nTaylor(1) ⊗ Fourier{Float64}(2, 1.0) ⊗ Chebyshev(3)\n\njulia> spaces(s)\n(Taylor(1), Fourier{Float64}(2, 1.0), Chebyshev(3))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.TensorIndices","page":"Vector spaces","title":"RadiiPolynomial.TensorIndices","text":"TensorIndices{<:Tuple}\n\nMultidimentional rectangular range of indices for some TensorSpace.\n\nExamples\n\njulia> TensorIndices((0:2, -1:1))\nTensorIndices{Tuple{UnitRange{Int64}, UnitRange{Int64}}}((0:2, -1:1))\n\njulia> indices(Taylor(2) ⊗ Fourier(1, 1.0))\nTensorIndices{Tuple{UnitRange{Int64}, UnitRange{Int64}}}((0:2, -1:1))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.:⊗","page":"Vector spaces","title":"RadiiPolynomial.:⊗","text":"⊗(s₁::BaseSpace, s₂::BaseSpace)\n⊗(s₁::TensorSpace, s₂::TensorSpace)\n⊗(s₁::TensorSpace, s₂::BaseSpace)\n⊗(s₁::BaseSpace, s₂::TensorSpace)\n\nCreate a TensorSpace from the tensor product of some SequenceSpace.\n\nSee also: TensorSpace.\n\nExamples\n\njulia> Taylor(1) ⊗ Fourier(2, 1.0)\nTaylor(1) ⊗ Fourier{Float64}(2, 1.0)\n\njulia> Taylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\nTaylor(1) ⊗ Fourier{Float64}(2, 1.0) ⊗ Chebyshev(3)\n\njulia> Taylor(1) ⊗ (Fourier(2, 1.0) ⊗ Chebyshev(3))\nTaylor(1) ⊗ Fourier{Float64}(2, 1.0) ⊗ Chebyshev(3)\n\njulia> (Taylor(1) ⊗ Fourier(2, 1.0)) ⊗ Chebyshev(3)\nTaylor(1) ⊗ Fourier{Float64}(2, 1.0) ⊗ Chebyshev(3)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianSpace","page":"Vector spaces","title":"RadiiPolynomial.CartesianSpace","text":"CartesianSpace <: VectorSpace\n\nAbstract type for all cartesian spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianPower","page":"Vector spaces","title":"RadiiPolynomial.CartesianPower","text":"CartesianPower{T<:VectorSpace} <: CartesianSpace\n\nCartesian space resulting from the cartesian product of the same VectorSpace.\n\nFields:\n\nspace :: T\nn :: Int\n\nConstructors:\n\nCartesianPower(::VectorSpace, ::Int)\n^(::VectorSpace, ::Int): equivalent to CartesianPower(::VectorSpace, ::Int)\n\nSee also: ^(::VectorSpace, ::Int), CartesianProduct and ×.\n\nExamples\n\njulia> s = CartesianPower(Taylor(1), 3)\nTaylor(1)³\n\njulia> space(s)\nTaylor(1)\n\njulia> nspaces(s)\n3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#Base.:^","page":"Vector spaces","title":"Base.:^","text":"^(s::VectorSpace, n::Int)\n\nCreate a CartesianPower from n cartesian product(s) of s.\n\nSee also: CartesianPower, CartesianProduct, ×.\n\nExamples\n\njulia> Taylor(1)^3\nTaylor(1)³\n\njulia> (Taylor(1)^3)^2\n(Taylor(1)³)²\n\n\n\n\n\n^(a::Sequence{<:SequenceSpace}, n::Int)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianProduct","page":"Vector spaces","title":"RadiiPolynomial.CartesianProduct","text":"CartesianProduct{T<:Tuple{Vararg{VectorSpace}}} <: CartesianSpace\n\nCartesian space resulting from the cartesian product of some VectorSpace.\n\nField:\n\nspaces :: T\n\nConstructors:\n\nCartesianProduct(::Tuple{Vararg{VectorSpace}})\nCartesianProduct(spaces::VectorSpace...): equivalent to CartesianProduct(spaces)\n×(s₁::VectorSpace, s₂::VectorSpace): equivalent to CartesianProduct((s₁, s₂))\n×(s₁::CartesianProduct, s₂::CartesianProduct): equivalent to CartesianProduct((s₁.spaces..., s₂.spaces...))\n×(s₁::CartesianProduct, s₂::VectorSpace): equivalent to CartesianProduct((s₁.spaces..., s₂))\n×(s₁::VectorSpace, s₂::CartesianProduct): equivalent to CartesianProduct((s₁, s₂.spaces...))\n\nSee also: ×, CartesianPower, ^(::VectorSpace, ::Int).\n\nExamples\n\njulia> s = CartesianProduct(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\nTaylor(1) × Fourier{Float64}(2, 1.0) × Chebyshev(3)\n\njulia> spaces(s)\n(Taylor(1), Fourier{Float64}(2, 1.0), Chebyshev(3))\n\njulia> nspaces(s)\n3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#LinearAlgebra.:×","page":"Vector spaces","title":"LinearAlgebra.:×","text":"×(::VectorSpace, ::VectorSpace)\n×(::CartesianProduct, ::CartesianProduct)\n×(::CartesianProduct, ::VectorSpace)\n×(::VectorSpace, ::CartesianProduct)\n\nCreate a CartesianProduct from the cartesian product of some VectorSpace.\n\nSee also: CartesianProduct, CartesianPower and ^(::VectorSpace, ::Int).\n\nExamples\n\njulia> Taylor(1) × Fourier(2, 1.0)\nTaylor(1) × Fourier{Float64}(2, 1.0)\n\njulia> Taylor(1) × Fourier(2, 1.0) × Chebyshev(3)\nTaylor(1) × Fourier{Float64}(2, 1.0) × Chebyshev(3)\n\njulia> (Taylor(1) × Fourier(2, 1.0)) × Chebyshev(3)\nTaylor(1) × Fourier{Float64}(2, 1.0) × Chebyshev(3)\n\njulia> Taylor(1) × (Fourier(2, 1.0) × Chebyshev(3))\nTaylor(1) × Fourier{Float64}(2, 1.0) × Chebyshev(3)\n\njulia> ParameterSpace()^2 × ((Taylor(1) ⊗ Fourier(2, 1.0)) × Chebyshev(3))^3\n𝕂² × ((Taylor(1) ⊗ Fourier{Float64}(2, 1.0)) × Chebyshev(3))³\n\n\n\n\n\n","category":"function"},{"location":"#Presentation","page":"Home","title":"Presentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The solution of many problems in dynamical systems can be seen as the fixed-point of an operator. In computer-assisted proofs, the Radii Polynomial Theorem gives us closed ball(s), centred at a numerical approximation of the fixed-point, within which the operator satisfies the Banach Fixed-Point Theorem.[1]","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: For Newton-like operators, the Radii Polynomial Theorem is an instance of the Newton-Kantorovich Theorem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Hence, the desired solution is the unique fixed-point within the ball(s) whose radius yields an a posteriori error bound on the numerical approximation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"RadiiPolynomial.jl is a Julia package to conduct the computational steps of the Radii Polynomial Theorem. For the entailed rigorous floating-point computations, the RadiiPolynomial software relies on IntervalArithmetic.jl[2].","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: L. Benet and D. P. Sanders, IntervalArithmetic.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"When the solution lies in a Banach space involving function spaces, the standard approach is to interpret the function spaces as sequence spaces. Thus, RadiiPolynomial is concerned with the latter (cf. ApproxFun.jl for a Julia package to approximate functions).","category":"page"},{"location":"#Installing","page":"Home","title":"Installing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The RadiiPolynomial software requires to install Julia (v1.6 or above).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, start Julia and execute the following command in the REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg; Pkg.add(\"RadiiPolynomial\")","category":"page"},{"location":"#Citing","page":"Home","title":"Citing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use the RadiiPolynomial software in your publication, research, teaching, or other activities, please use the following BibTeX template (cf. CITATION.bib):","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{RadiiPolynomial.jl,\n  author = {Olivier Hénot},\n  title  = {RadiiPolynomial.jl},\n  url    = {https://github.com/OlivierHnt/RadiiPolynomial.jl},\n  year   = {},\n  doi    = {}\n}","category":"page"},{"location":"","page":"Home","title":"Home","text":"The empty fields year and doi should correspond with the cited version of the RadiiPolynomial software. For instance, if you wish to cite the software as a whole: year = {2021} and doi = {10.5281/zenodo.5705258}.","category":"page"},{"location":"","page":"Home","title":"Home","text":"You may refer to 10.5281/zenodo.5705258 for more informations.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/#Pseudo-arclength-continuation-of-equilibria-of-the-FitzHugh-Nagumo-model","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"","category":"section"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"In this example, we will prove the existence of a branch of equilibria of the FitzHugh-Nagumo model","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"begincases\ndisplaystyle fracddt u(t) = f(gamma u(t)) = beginpmatrix u_1(t)(u_1(t) - a)(1 - u_1(t)) - u_2(t)  varepsilon(u_1(t) - gamma u_2(t)) endpmatrix\nu(0) = u_0 in mathbbR^2\nendcases","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"where a = 5 and varepsilon = 1.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The vector-field f and its Jacobian, denoted Df, may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"function f(x)\n    a, ϵ = 5, 1\n    γ, u₁, u₂ = x\n    return [u₁*(u₁ - a)*(1 - u₁) - u₂, ϵ*(u₁ - γ*u₂)]\nend\n\nfunction Df(x)\n    a, ϵ = 5, 1\n    γ, u₁, u₂ = x\n    return [0 a*(2u₁-1)+(2-3u₁)*u₁ -1 ; -ϵ*u₂ ϵ -ϵ*γ]\nend\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"To this end, we use the pseudo-arclength continuation and prove, at each step, that there exists a box, surrounding the linear numerical approximation, which contains the desired curve.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"In a nutshell, the pseudo-arclength continuation consists in computing a sequence of numerical zeros of f. Starting with an initial approximate zero x_textinit in mathbbR^3, we retrieve an approximate tangent vector v to the curve at x_textinit by looking at ker Df(x_textinit). Then, our predictor for the next zero is set to w = x_textinit + delta v where delta  0 represents the step size. The Newton's method is applied on the mapping F_textNewton  mathbbR^3 to mathbbR^3 given by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"F_textNewton(x) =\nbeginpmatrix\n(x - w) cdot v\nf(x)\nendpmatrix","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The mapping F_textNewton and its Jacobian may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"import LinearAlgebra: ⋅\n\nF(x, v, w) = [(x - w) ⋅ v ; f(x)]\n\nDF(x, v) = [transpose(v) ; Df(x)]\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Next, we perform Newton's method:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"using RadiiPolynomial\nimport LinearAlgebra: nullspace\n\nx_init = [2, 1.129171306613029, 0.564585653306514] # initial point on the branch of equilibria\n\nv = vec(nullspace(Df(x_init))) # initial tangent vector\n\nδ = 5e-2 # step size\n\nw = x_init + δ * v # predictor\n\nx_final, success = newton(x -> (F(x, v, w), DF(x, v)), w)\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Once the Newton's method converged to some x_textfinal in mathbbR^3, we make a linear approximation of the curve of zeros","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"x_0(s) = x_textinit + s (x_textfinal - x_textinit) qquad textfor all  s in 01","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Define the mapping F  mathbbR^3 times 01 to mathbbR^3 by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"F(x s) =\nbeginpmatrix\n(x - x_0(s)) cdot v\nf(x)\nendpmatrix","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"and the fixed-point operator T  mathbbR^3 times 01 to mathbbR^3 by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"T(x s) = x - A F(x s)","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"where A  mathbbR^3 to mathbbR^3 is the injective operator corresponding to a numerical approximation of D_x F(x_0(s) s)^-1 for all s in 0 1.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Let R  0. We use a uniform version of the second-order Radii Polynomial Theorem with C^2 condition such that we need to estimate T(x_0(s) s) - x_0(s)_infty, D_x T(x_0(s) s)_infty and sup_x in textcl( B_R(x_0(s)) ) D_x^2 T(x s)_infty for all s in 01. In particular, we have","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"T(x_0(s) s) - x_0(s)_infty = leftA beginpmatrix 0  f(x_0(s)) endpmatrix right_infty qquad textfor all  s in 01","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"R = 1e-1\n\nx₀_interval = Interval.(x_init) .+ Interval(0.0, 1.0) .* (Interval.(x_final) .- Interval.(x_init))\nx₀R_interval = Interval.(inf.(x₀_interval .- R), sup.(x₀_interval .+ R))\n\nF_interval = F(x₀_interval, v, x₀_interval)\nF_interval[1] = 0 # the first component is trivial by definition\nDF_interval = DF(x₀_interval, v)\n\nA = inv(mid.(DF_interval))\n\nY = norm(Sequence(A * F_interval), Inf)\n\nZ₁ = opnorm(LinearOperator(A * DF_interval - I), Inf)\n\na, ϵ = 5, 1\nZ₂ = opnorm(LinearOperator(Interval.(A)), Inf) * max(2abs(a) + 2 + 6(abs(x₀_interval[2]) + R), 2abs(ϵ))\n\nshowfull(interval_of_existence(Y, Z₁, Z₂, R, C²Condition()))","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Whenever the proof is successful, we proceed to the next iteration of the pseudo-arclength continuation and repeat the above strategy.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The following animation[1] shows the successive steps of a rigorous pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"[1]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"<video width=\"800\" height=\"400\" controls autoplay>\n  <source src=\"../fhn_pseudo_arclength.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/sequences/#Sequences","page":"Sequences","title":"Sequences","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"A Sequence is a structure representing a sequence in a prescribed VectorSpace. More precisely, a Sequence is comprised of the two fields space::VectorSpace and coefficients::AbstractVector with matching dimension and length.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"a = Sequence(Taylor(1), [1, 2])","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The two fields space and coefficients are accessible via the respective functions of the same name.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"space(a)\ncoefficients(a)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The coefficients of a Sequence are indexed according to the indices of the space (as given by indices).","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"a[0:1] # indices(space(a))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"When the space of a Sequence is a CartesianSpace, its coefficients are given as the concatenation of the coefficients associated with each space. The function component extracts a Sequence composing the cartesian space.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"b = Sequence(ParameterSpace() × Taylor(1)^2, [1, 2, 3, 4, 5])\nb[1:5] # indices(space(b))\ncomponent(b, 1) # extract the sequence associated with the space ParameterSpace()\ncomponent(b, 2) # extract the sequence associated with the space Taylor(1)^2\ncomponent(component(b, 2), 1)\ncomponent(component(b, 2), 2)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"Similarly, the function eachcomponent returns a Generator whose iterates yield each Sequence composing the cartesian space.","category":"page"},{"location":"sequence_spaces/sequences/#Arithmetic","page":"Sequences","title":"Arithmetic","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The addition and subtraction operations are implemented as the + and - functions respectively. Their bar counterparts add_bar (unicode alias +\\bar<tab>) and sub_bar (unicode alias -\\bar<tab>) give the result projected in the smallest compatible space between the operands.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"c = Sequence(Taylor(1), [0, 1])\nd = Sequence(Taylor(2), [1, 2, 1])\nc + d\nc - d\nadd_bar(c, d) # project(c + d, Taylor(1))\nsub_bar(c, d) # project(c - d, Taylor(1))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The discrete convolution between sequences whose spaces are a SequenceSpace is implemented as the *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int) functions. Their bar counterparts mul_bar (unicode alias *\\bar<tab>) and pow_bar (unicode alias ^\\bar<tab>) give the result projected in the smallest compatible space between the operands; in general, mul_bar is not associative.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"c * d\nc ^ 3\nmul_bar(c, d) # project(c * d, Taylor(1))\npow_bar(c, 3) # project(c ^ 3, Taylor(1))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"To improve performance, the FFT algorithm may be used to compute discrete convolutions via the Convolution Theorem. However, the performance gain is tempered with the loss of accuracy which may stop the decay of the coefficients.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"x = Sequence(Taylor(3), Interval.([inv(10_000.0 ^ i) for i ∈ 0:3]))\nx³ = x ^ 3\nx³_fft = rifft!(similar(x³), fft(x, fft_size(space(x), 3)) .^ 3)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"To circumvent machine precision limitations, the banach_rounding! method enclose rigorously each term of the convolution beyond a prescribed order.[1]","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"[1]: J.-P. Lessard, Computing discrete convolutions with verified accuracy via Banach algebras and the FFT, Applications of Mathematics, 63 (2018), 219-235.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The rounding strategy for *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), mul_bar and pow_bar is integrated in the functions banach_rounding_mul, banach_rounding_mul!, banach_rounding_pow, banach_rounding_mul_bar and banach_rounding_pow_bar respectively.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"X = ℓ¹(GeometricWeight(Interval(10_000.0)))\nbanach_rounding!(x³_fft, norm(x, X) ^ 3, X, 5)","category":"page"},{"location":"sequence_spaces/sequences/#API","page":"Sequences","title":"API","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"Sequence\n*(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace})\nmul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number)\nbanach_rounding_mul\nbanach_rounding_mul!\n^(::Sequence{<:SequenceSpace}, ::Int)\nbanach_rounding_pow","category":"page"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.Sequence","page":"Sequences","title":"RadiiPolynomial.Sequence","text":"Sequence{T<:VectorSpace,S<:AbstractVector}\n\nCompactly supported sequence in the given space.\n\nFields:\n\nspace :: T\ncoefficients :: S\n\nConstructors:\n\nSequence(::VectorSpace, ::AbstractVector)\nSequence(coefficients::AbstractVector): equivalent to Sequence(ParameterSpace()^length(coefficients), coefficients)\n\nExamples\n\njulia> Sequence(Taylor(2), [1, 2, 1]) # 1 + 2x + x^2\nSequence in Taylor(2) with coefficients Vector{Int64}:\n 1\n 2\n 1\n\njulia> Sequence(Taylor(1) ⊗ Fourier(1, 1.0), [0.5, 0.5, 0.0, 0.0, 0.5, 0.5]) # (1 + x) cos(y)\nSequence in Taylor(1) ⊗ Fourier{Float64}(1, 1.0) with coefficients Vector{Float64}:\n 0.5\n 0.5\n 0.0\n 0.0\n 0.5\n 0.5\n\njulia> Sequence([1, 2, 3])\nSequence in 𝕂³ with coefficients Vector{Int64}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/sequences/#Base.:*-Tuple{Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}}","page":"Sequences","title":"Base.:*","text":"*(a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace})\n\nCompute the discrete convolution (associated with space(a) and space(b)) of a and b.\n\nSee also: mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), banach_rounding_mul and banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#LinearAlgebra.mul!-Tuple{Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}, Number, Number}","page":"Sequences","title":"LinearAlgebra.mul!","text":"mul!(c::Sequence{<:SequenceSpace}, a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, α::Number, β::Number)\n\nCompute project(a * b, space(c)) * α + c * β in-place. The result is stored in c by overwriting it.\n\nNote: c must not be aliased with either a or b.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), ^(::Sequence{<:SequenceSpace}, ::Int), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_mul","page":"Sequences","title":"RadiiPolynomial.banach_rounding_mul","text":"banach_rounding_mul(a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, X::ℓ¹)\n\nCompute the discrete convolution (associated with space(a) and space(b)) of a and b. A cut-off order is estimated such that the coefficients of the output beyond this order are rigorously enclosed.\n\nSee also: banach_rounding_mul!, banach_rounding_pow, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_mul!","page":"Sequences","title":"RadiiPolynomial.banach_rounding_mul!","text":"banach_rounding_mul!(c::Sequence{<:SequenceSpace}, a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, X::ℓ¹)\n\nCompute project(banach_rounding_mul(a, b, X), space(c)) in-place. The result is stored in c by overwriting it.\n\nNote: c must not be aliased with either a or b.\n\nSee also: banach_rounding_mul, banach_rounding_pow, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/sequences/#Base.:^-Tuple{Sequence{<:SequenceSpace}, Int64}","page":"Sequences","title":"Base.:^","text":"^(a::Sequence{<:SequenceSpace}, n::Int)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_pow","page":"Sequences","title":"RadiiPolynomial.banach_rounding_pow","text":"banach_rounding_pow(a::Sequence{<:SequenceSpace}, n::Int, X::ℓ¹)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times. A cut-off order is estimated such that the coefficients of the output beyond this order are rigorously enclosed.\n\nSee also: banach_rounding_mul, banach_rounding_mul!, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"}]
}
