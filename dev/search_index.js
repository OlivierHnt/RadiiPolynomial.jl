var documenterSearchIndex = {"docs":
[{"location":"radii_polynomial_approach/#State-of-the-art","page":"State of the art","title":"State of the art","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"The study of complex dynamical systems requires numerical computations to access the dynamics. While numerical methods provide accurate approximations, they often come at the cost of rounding, discretization errors and the surrender of an a posteriori error bound between the approximation and the exact solution of the original problem.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"Computer-assisted proofs aim to validate numerical simulations and derive mathematical theorems, thereby binding computational results with topological, geometric and qualitative methods of nonlinear theory.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"RadiiPolynomial.jl is a Julia package to conduct the computational steps of a type of computer-assisted proofs referred to as the radii polynomial approach (see the next section below).","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"In the context of the radii polynomial approach, we discretize functions spaces with respect to a basis that best fit the underlying problem. The multiplication of the basis elements usually provide a natural algebra on the corresponding sequence space. For instance, the space of Taylor coefficients equipped with the Cauchy product forms a Banach algebra. Currently, the RadiiPolynomial library does not automatically propagate error bounds which limits us to polynomial nonlinearities. However, note that by means of strategies akin to automatic differentiation, it is possible to generate, for a large class of differential equations, an auxiliary polynomial system of equations.[1] To illustrate, the differential equation fracddt u(t) = e^u(t) - 1, with initial condition u(0) = u_0, can be solved by studying the system","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"begincases\ndisplaystyle fracddt u(t) = v(t) - 1\ndisplaystyle fracddt v(t) = v(t)(v(t) - 1)\nu(0) = u_0 v(0) = e^u_0\nendcases","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"[1]: O. Hénot, On polynomial forms of nonlinear functional differential equations, Journal of Computational Dynamics, 8 (2021), 307-323.","category":"page"},{"location":"radii_polynomial_approach/#radii_polynomial_approach","page":"State of the art","title":"Radii polynomial approach","text":"","category":"section"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"Given a problem in dynamical systems (e.g. existence of an invariant set, stability analysis, etc.), one approach of computer-assisted proofs consists in representing the desired solution tildex as an isolated fixed-point in a Banach space X. The assistance of the computer is used to verify that the corresponding fixed-point operator T abides by the Banach Fixed-Point Theorem in a vicinity of a numerical approximation barx. Note that a particular case of this procedure is the well-known Newton-Kantorovich Theorem.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"We refer to this strategy as the radii polynomial approach since, in practice, we prove the contraction of T in balls whose radii are determined by the roots of a polynomial. For the sake of completeness, we report the fundamental principles in the following theorem.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"<div class=\"theorem\" text=\"Radii Polynomial Theorem\">","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"Let X be a Banach space, U an open subset of X, T in C^1(U X) an operator, barx in U and R  0 such that textcl( B_R(barx) ) subset U.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"(First-order) Suppose Y Z_1 ge 0 satisfy","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"beginaligned\nT(barx) - barx_X le Y\nsup_x in textcl( B_R(barx) ) DT(x)_mathscrB(X X) le Z_1\nendaligned","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"and define the radii polynomial by p(r) bydef Y + (Z_1 - 1) r. If there exists a radius barr in 0 R such that p(barr) le 0 and Z_1  1, then T has a unique fixed-point tildex in textcl( B_barr (barx) ).","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"(Second-order) Suppose Y Z_1 Z_2 ge 0 satisfy","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"beginaligned\nT(barx) - barx_X le Y\nDT(barx)_mathscrB(X X) le Z_1\nDT(x) - DT(barx)_mathscrB(X X) le Z_2 x - barx_X qquad textfor all  x in textcl( B_R(barx) )\nendaligned","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"and define the radii polynomial by p(r) bydef Y + (Z_1 - 1) r + fracZ_22 r^2. If there exists a radius barr in 0 R such that p(barr) le 0 and Z_1 + Z_2 barr  1, then T has a unique fixed-point tildex in textcl( B_barr (barx) ).","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"</div>\n<br>","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"The set of all possible radii is called the interval of existence. Its minimum gives the sharpest computed a posteriori error bound on barx. On the other hand, its maximum represents the largest computed radius of the ball, centred at barx, within which the solution is unique.","category":"page"},{"location":"radii_polynomial_approach/","page":"State of the art","title":"State of the art","text":"interval_of_existence","category":"page"},{"location":"radii_polynomial_approach/#RadiiPolynomial.interval_of_existence","page":"State of the art","title":"RadiiPolynomial.interval_of_existence","text":"interval_of_existence(Y::Interval, Z₁::Interval, R::Real)\n\nReturn an interval of existence I subset 0 R such that Y + (Z_1 - 1) r le 0 and Z_1  1 for all r in I.\n\n\n\n\n\ninterval_of_existence(Y::Interval, Z₁::Interval, Z₂::Interval, R::Real)\n\nReturn an interval of existence I subset 0 R such that Y + (Z_1 - 1) r + Z_2 r^2  2 le 0 and Z_1 + Z_2 r  1 for all r in I.\n\n\n\n\n\n","category":"function"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/#Periodic-orbit-of-the-Lorenz-system","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"In this example, we will prove the existence of a periodic orbit of the Lorenz system","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"fracddt u(t) = f(u(t) sigma rho beta) bydef\nbeginpmatrix\nsigma(u_2(t) - u_1(t))\nu_1(t)(rho - u_3(t)) - u_2(t)\nu_1(t) u_2(t) - beta u_3(t)\nendpmatrix qquad sigma rho beta in mathbbR","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The vector field f and its derivative with respect to u, denoted D_u f, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"using RadiiPolynomial\n\nfunction f!(f, u, σ, ρ, β)\n    u₁, u₂, u₃ = eachcomponent(u)\n    project!(component(f, 1), σ*(u₂ - u₁))\n    project!(component(f, 2), u₁*(ρ - u₃) - u₂)\n    project!(component(f, 3), u₁*u₂ - β*u₃)\n    return f\nend\n\nfunction Df!(Df, u, σ, ρ, β)\n    u₁, u₂, u₃ = eachcomponent(u)\n    project!(component(Df, 1, 1), Multiplication(-σ*one(u₁)))\n    project!(component(Df, 1, 2), Multiplication(σ*one(u₂)))\n    project!(component(Df, 1, 3), Multiplication(zero(u₃)))\n    project!(component(Df, 2, 1), Multiplication(ρ-u₃))\n    project!(component(Df, 2, 2), Multiplication(-one(u₂)))\n    project!(component(Df, 2, 3), Multiplication(-u₁))\n    project!(component(Df, 3, 1), Multiplication(u₂))\n    project!(component(Df, 3, 2), Multiplication(u₁))\n    project!(component(Df, 3, 3), Multiplication(-β*one(u₃)))\n    return Df\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Let nu  1,","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"ell^1_nu mathbbZ bydef left u in mathbbC^mathbbZ    u_ell^1_nu mathbbZ bydef sum_k in mathbbZ u_k nu^k right","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"and *  ell^1_nu mathbbZ times ell^1_nu mathbbZ to ell^1_nu mathbbZ be the discrete convolution given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"u * v bydef left sum_l in mathbbZ u_k - l v_l right_k in mathbbZ qquad textfor all  u v in ell^1_nu mathbbZ","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"For any sequence u in ell^1_nu mathbbZ, the Fourier series sum_k in mathbbZ u_k e^i omega k t, for some frequency omega  0, defines an analytic 2piomega^-1-periodic function in C^omega(mathbbR mathbbC); while the discrete convolution * corresponds to the product of Fourier series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The Banach space ell^1_nu mathbbZ is a suitable space to represent each component of a periodic solution of the Lorenz system. Indeed, it is a standard result from ODE theory that analytic vector fields yield analytic solutions.[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"[1]: A. Hungria, J.-P. Lessard and J. D. Mireles James, Rigorous numerics for analytic solutions of differential equations: the radii polynomial approach, Mathematics of Computation, 85 (2016), 1427-1459.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Define the Banach space X bydef mathbbC times (ell^1_nu mathbbZ)^3 endowed with the norm x_X bydef gamma + u_1_ell^1_nu mathbbZ + u_2_ell^1_nu mathbbZ + u_3_ell^1_nu mathbbZ for all x = (gamma u_1 u_2 u_3) in X. It follows that the sequence of coefficients of a 2pigamma-periodic Fourier series solving the Lorenz equations is a zero of the mapping F  X to X given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"F(x) bydef\nbeginpmatrix\nsum_j = 1^3 (sum_k = -K^K (u_j)_k - xi_j)eta_j\nleft gamma ( f(u sigma rho beta) )_k - i k u_k right_k in mathbbZ\nendpmatrix qquad textfor all  x = (gamma u_1 u_2 u_3) in textdomain(F)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"where xi in mathbbR^3 is a chosen approximate position of the periodic orbit at t = 0 and eta in mathbbR^3 the corresponding approximate tangent vector at xi. By means of the phase condition sum_j = 1^3 (sum_k = -n^n (u_j)_k - xi_j)eta_j, the translation invariance of the periodic orbit is removed.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The mapping F and its Fréchet derivative, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"function F!(F, x, σ, ρ, β, ξ, η)\n    γ, u = x[1], component(x, 2)\n\n    F[1] =\n        (component(u, 1)(0) - ξ[1]) * η[1] +\n        (component(u, 2)(0) - ξ[2]) * η[2] +\n        (component(u, 3)(0) - ξ[3]) * η[3]\n\n    project!(component(F, 2), γ * f!(component(F, 2), u, σ, ρ, β) - differentiate(u))\n\n    return F\nend\n\nfunction DF!(DF, x, σ, ρ, β, η)\n    γ, u = x[1], component(x, 2)\n\n    DF .= 0\n\n    component(component(DF, 1, 2), 1)[1,:] .= η[1]\n    component(component(DF, 1, 2), 2)[1,:] .= η[2]\n    component(component(DF, 1, 2), 3)[1,:] .= η[3]\n\n    f!(component(DF, 2, 1), u, σ, ρ, β)\n\n    project!(component(DF, 2, 2), γ * Df!(component(DF, 2, 2), u, σ, ρ, β) - Derivative(1))\n\n    return DF\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Consider the fixed-point operator T  X to X defined by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"T(x) bydef x - A F(x)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"where A  X to X is an injective operator corresponding to an approximation of DF(barx)^-1 for some numerical zero barx = (bargamma baru_1 baru_2 baru_3) in X of F.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Given an initial guess, the numerical zero barx of F may be obtained by Newton's method:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"σ, ρ, β = 10.0, 28.0, 8/3\n\nK = 60\n\nx̄ = zeros(ComplexF64, ParameterSpace() × Fourier(K, 1.0)^3)\nx̄[1] = 1.5/(2π) # γ, i.e. approximate inverse of the frequency\ncomponent(component(x̄, 2), 1)[1:2:5] =\n    [-2.9 - 4.3im,\n      1.6 - 1.1im,\n      0.3 + 0.4im]\ncomponent(component(x̄, 2), 2)[1:2:5] =\n    [-1.2 - 5.4im,\n      3.0 + 0.8im,\n     -0.4 + 1.1im]\ncomponent(component(x̄, 2), 3)[0:2:4] =\n    [ 23,\n      3.8 + 4.7im,\n     -1.8 + 0.9im]\ncomponent(component(x̄, 2), 1)[-5:2:-1] .= conj.(component(component(x̄, 2), 1)[5:-2:1])\ncomponent(component(x̄, 2), 2)[-5:2:-1] .= conj.(component(component(x̄, 2), 2)[5:-2:1])\ncomponent(component(x̄, 2), 3)[-4:2:0] .= conj.(component(component(x̄, 2), 3)[4:-2:0])\n\nξ = component(x̄, 2)(0)\nη = differentiate(component(x̄, 2))(0)\n\nnewton!((F, DF, x) -> (F!(F, x, σ, ρ, β, ξ, η), DF!(DF, x, σ, ρ, β, η)), x̄)\n\n# impose that x̄[1] is real and component(x̄, 2) are the coefficients of a real Fourier series\nx̄[1] = real(x̄[1])\nfor i ∈ 1:3\n    component(component(x̄, 2), i)[0] = real(component(component(x̄, 2), i)[0])\n    component(component(x̄, 2), i)[-K:-1] .= conj.(component(component(x̄, 2), i)[K:-1:1])\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Let R  0. Since T in C^2(X X) we may use the second-order Radii Polynomial Theorem such that we need to estimate T(barx) - barx_X, DT(barx)_mathscrB(X X) and sup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X mathscrB(X X)).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"To this end, consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"(Pi_K u)_k bydef\nbegincases\nu_k  k le K\n0  k  K\nendcases\nqquad textfor all  u in ell^1_nu mathbbZ","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Using the same symbol, this projection extends naturally to (ell^1_nu mathbbZ)^3 and X by acting on each component as follows Pi_K u bydef (Pi_K u_1 Pi_K u_2 Pi_K u_3), for all u = (u_1 u_2 u_3) in (ell^1_nu mathbbZ)^3, and Pi_K x bydef (gamma Pi_K u_1 Pi_K u_2 Pi_K u_3), for all x = (gamma u_1 u_2 u_3) in X. For each of the Banach spaces ell^1_nu mathbbZ (ell^1_nu mathbbZ)^3 X, we define the complementary operator Pi_infty(K) bydef I - Pi_K.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"Thus, denoting baru = (baru_1 baru_2 baru_3), we have","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"beginaligned\nT(barx) - barx_X le\nPi_K A Pi_K F(barx)_X + fracbargamman+1 Pi_infty(K) f(baru sigma rho beta)_(ell^1_nu mathbbZ)^3\nDT(barx)_mathscrB(X X) le\nPi_K A Pi_K DF(barx) Pi_2K - Pi_K_mathscrB(X X) + frac1n+1 maxBig( Pi_infty(K) f(baru sigma rho beta)_(ell^1_nu mathbbZ)^3\nqquad bargamma maxleft(sigma + rho-baru_3_ell^1_nu mathbbZ + baru_2_ell^1_nu mathbbZ sigma + 1 + baru_1_ell^1_nu mathbbZ baru_1_ell^1_nu mathbbZ + betaright) Big)\nsup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(X mathscrB(X X)) le\nleft(Pi_K A Pi_K_mathscrB(X X) + frac1n+1right) maxBig( 2 (bargamma + R)\nqquad maxleft(sigma + rho-baru_3_ell^1_nu mathbbZ + baru_2_ell^1_nu mathbbZ + 2R sigma + 1 + baru_1_ell^1_nu mathbbZ + R baru_1_ell^1_nu mathbbZ + R + betaright) Big)\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"ν = interval(1.05)\nX_F = ℓ¹(GeometricWeight(ν))\nX_F³ = NormedCartesianSpace(X_F, ℓ¹())\nX = NormedCartesianSpace((ℓ¹(), X_F³), ℓ¹())\nR = 1e-10\n\nσ_interval, ρ_interval, β_interval = interval(10), interval(28), interval(8)/interval(3)\n\nx̄_interval = Sequence(ParameterSpace() × Fourier(K, interval(1))^3, interval.(coefficients(x̄)))\nγ̄_interval = real(x̄_interval[1])\nū_interval = component(x̄_interval, 2)\n\nξ_interval = interval.(ξ)\nη_interval = interval.(η)\n\nF_interval = zeros(eltype(x̄_interval), ParameterSpace() × Fourier(2K, interval(1))^3)\nF!(F_interval, x̄_interval, σ_interval, ρ_interval, β_interval, ξ_interval, η_interval)\n\ntail_γ̄f_interval = copy(component(F_interval, 2))\nfor i ∈ 1:3\n    component(tail_γ̄f_interval, i)[-K:K] .= interval(0)\nend\n\nDF_interval = zeros(eltype(x̄_interval), space(F_interval), space(x̄_interval))\nDF!(DF_interval, x̄_interval, σ_interval, ρ_interval, β_interval, η_interval)\n\nA = interval.(inv(mid.(project(DF_interval, space(x̄_interval), space(x̄_interval)))))\nbound_tail_A = inv(interval(K+1))\n\n# computation of the bounds\n\nY = norm(A * F_interval, X) + bound_tail_A * norm(tail_γ̄f_interval, X_F³)\n\nopnorm_Df = max(σ_interval + norm(ρ_interval-component(ū_interval, 3), X_F) + norm(component(ū_interval, 2), X_F),\n                σ_interval + 1 + norm(component(ū_interval, 1), X_F),\n                norm(component(ū_interval, 1), X_F) + β_interval)\n\nZ₁ = opnorm(A * DF_interval - UniformScaling(interval(1)), X) +\n    bound_tail_A * max(norm(tail_γ̄f_interval / γ̄_interval, X_F³), γ̄_interval * opnorm_Df)\n\nZ₂ = (opnorm(A, X) + bound_tail_A) * max(2 * (γ̄_interval + R),\n    max(σ_interval + norm(ρ_interval - component(ū_interval, 3), X_F) + R + norm(component(ū_interval, 2), X_F) + R,\n        σ_interval + 1 + norm(component(ū_interval, 1), X_F) + R,\n        norm(component(ū_interval, 1), X_F) + R + β_interval))\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, Z₂, R)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"The following animation[2] shows the numerical approximation of the proven periodic orbit (blue line) and the equilibria (red markers).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/lorenz_po/","page":"Periodic orbit of the Lorenz system","title":"Periodic orbit of the Lorenz system","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../lorenz_po.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/linear_operators/#Linear-operators","page":"Linear operators","title":"Linear operators","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A LinearOperator is a structure representing a linear operator from a VectorSpace to an other. More precisely, a LinearOperator is comprised of the three fields domain::VectorSpace, codomain::VectorSpace and coefficients::AbsractMatrix with matching dimensions and size.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A = LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The three fields domain, codomain and coefficients are accessible via the respective functions of the same name.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"domain(A)\ncodomain(A)\ncoefficients(A)","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"For convenience, the methods zeros, ones, fill and fill! are available:","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"dom, codom = Taylor(1), Taylor(2)\nzeros(dom, codom)\nones(dom, codom)\nfill(2, dom, codom)\nfill!(zeros(dom, codom), 2)","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The coefficients of a LinearOperator are indexed according to the indices of the domain and codomain (as given by indices).","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"A[0:1,0:1] # indices(domain(A)), indices(codomain(A))","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"When the domain and/or the codomain of a LinearOperator is a CartesianSpace, its coefficients can be thought of as a block matrix . The function component extracts a LinearOperator composing the cartesian space.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"B = LinearOperator(ParameterSpace() × Taylor(1)^2, ParameterSpace() × Taylor(1)^2, reshape(1:25, 5, 5))\nB[1:5,1:5] # indices(domain(B)), indices(codomain(B))\ncomponent(B, 1, 1) # extract the linear operator associated with the domain ParameterSpace() and codomain ParameterSpace()\ncomponent(B, 2, 2) # extract the linear operator associated with the domain Taylor(1)^2 and codomain Taylor(1)^2\ncomponent(component(B, 2, 2), 1, 1)\ncomponent(component(B, 2, 2), 2, 2)","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"Similarly, the function eachcomponent returns a Generator whose iterates yield each LinearOperator composing the cartesian space.","category":"page"},{"location":"sequence_spaces/linear_operators/#Arithmetic","page":"Linear operators","title":"Arithmetic","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The addition and subtraction operations are implemented as the + and - functions respectively. Their bar counterparts add_bar (unicode alias +\\bar<tab>) and sub_bar (unicode alias -\\bar<tab>) give the result projected in the smallest compatible domain and codomain between the operands.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"C = LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])\nD = LinearOperator(Taylor(1), Taylor(2), [1 2 ; 3 4 ; 5 6])\nC + D\nC - D\nadd_bar(C, D) # project(C + D, Taylor(1), Taylor(1))\nsub_bar(C, D) # project(C - D, Taylor(1), Taylor(1))\nC + I\nC - I","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The product between LinearOperator is implemented as the * and ^ functions. The division between LinearOperator is implemented as the \\ method.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"C * D\nC ^ 3\nC \\ C","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"The action of a LinearOperator is performed by the right product * of a LinearOperator with a Sequence; alternatively, LinearOperator defines a method on a Sequence representing *. Naturally, the resulting sequence is an element of the codomain of the LinearOperator.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"Conversely, the operator \\ between a LinearOperator and a Sequence corresponds to the action of the inverse of the LinearOperator; the output sequence is an element of the domain of the LinearOperator.","category":"page"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"x = Sequence(Taylor(2), [1, 1, 1])\nC * x # C(x)\nD \\ x","category":"page"},{"location":"sequence_spaces/linear_operators/#API","page":"Linear operators","title":"API","text":"","category":"section"},{"location":"sequence_spaces/linear_operators/","page":"Linear operators","title":"Linear operators","text":"LinearOperator","category":"page"},{"location":"sequence_spaces/linear_operators/#RadiiPolynomial.LinearOperator","page":"Linear operators","title":"RadiiPolynomial.LinearOperator","text":"LinearOperator{T<:VectorSpace,S<:VectorSpace,R<:AbstractMatrix}\n\nCompactly supported linear operator with effective domain and codomain.\n\nFields:\n\ndomain :: T\ncodomain :: S\ncoefficients :: R\n\nConstructors:\n\nLinearOperator(::VectorSpace, ::VectorSpace, ::AbstractMatrix)\nLinearOperator(coefficients::AbstractMatrix): equivalent to LinearOperator(ParameterSpace()^size(coefficients, 2), ParameterSpace()^size(coefficients, 1), coefficients)\n\nExamples\n\njulia> LinearOperator(Taylor(1), Taylor(1), [1 2 ; 3 4])\nLinearOperator : Taylor(1) → Taylor(1) with coefficients Matrix{Int64}:\n 1  2\n 3  4\n\njulia> LinearOperator(Taylor(2), ParameterSpace(), [1.0 0.5 0.25])\nLinearOperator : Taylor(2) → 𝕂 with coefficients Matrix{Float64}:\n 1.0  0.5  0.25\n\njulia> LinearOperator([1 2 3 ; 4 5 6])\nLinearOperator : 𝕂³ → 𝕂² with coefficients Matrix{Int64}:\n 1  2  3\n 4  5  6\n\n\n\n\n\n","category":"type"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/#Initial-value-problem-of-the-logistic-equation","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"In this example, we will prove the existence of a solution of the logistic equation","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"begincases\ndisplaystyle fracddt u(t) = f(u(t)) bydef u(t)(1 - u(t))\nu(0) = 12\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Let nu  0,","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"ell^1_nu mathbbN bydef left  x_alpha _alpha ge 0 in mathbbR^mathbbN     x _ell^1_nu mathbbN bydef sum_alpha ge 0 x_alpha nu^alpha  +infty right","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"and *  ell^1_nu mathbbN times ell^1_nu mathbbN to ell^1_nu mathbbN be the Cauchy product given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"x * y bydef left sum_beta = 0^alpha x_alpha - beta y_beta right_alpha ge 0 qquad textfor all  x y in ell^1_nu mathbbN","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"For any sequence x in ell^1_nu mathbbN, the Taylor series sum_alpha ge 0 x_alpha t^alpha defines an analytic function in C^omega(-nu nu mathbbR); while the Cauchy product * corresponds to the product of Taylor series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The Banach space ell^1_nu mathbbN is a suitable space to represent a solution of the logistic equation. Indeed, it is a standard result from ODE theory that analytic vector fields yield analytic solutions.[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"[1]: A. Hungria, J.-P. Lessard and J. D. Mireles James, Rigorous numerics for analytic solutions of differential equations: the radii polynomial approach, Mathematics of Computation, 85 (2016), 1427-1459.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"It follows that the sequence of coefficients of a Taylor series solving the initial value problem is a zero of the mapping F  ell^1_nu mathbbN to ell^1_nu mathbbN given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"( F(x) )_alpha bydef\nbegincases\nx_0 - 12  alpha = 0\nalpha x_alpha - (x*(1 - x))_alpha-1  alpha ge 1\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The mapping F and its Fréchet derivative, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"using RadiiPolynomial\n\nfunction F!(F, x)\n    F[0] = x[0] - 0.5\n\n    v = differentiate(x) - x*(1 - x)\n    for α ∈ 1:order(F)\n        F[α] = v[α-1]\n    end\n\n    return F\nend\n\nfunction DF!(DF, x)\n    DF .= 0\n\n    DF[0,0] = 1\n\n    DF[1:end,:] .= Derivative(1) - project(Multiplication(1 - 2x), domain(DF), Taylor(order(codomain(DF))-1))\n\n    return DF\nend\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Consider the fixed-point operator T  ell^1_nu mathbbN to ell^1_nu mathbbN defined by","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"T(x) bydef x - A F(x)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"where A  ell^1_nu mathbbN to ell^1_nu mathbbN is an injective operator corresponding to an approximation of DF(barx)^-1 for some numerical zero barx in ell^1_nu mathbbN of F.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Given an initial guess, the numerical zero barx of F may be obtained by Newton's method:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"n = 27\n\nx̄ = Sequence(Taylor(n), zeros(n+1))\n\nx̄, success = newton!((F, DF, x) -> (F!(F, x), DF!(DF, x)), x̄)\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Let R  0. Since T in C^2(ell^1_nu mathbbN ell^1_nu mathbbN) we may use the second-order Radii Polynomial Theorem such that we need to estimate T(barx) - barx_ell^1_nu mathbbN, DT(barx)_mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN) and sup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(ell^1_nu mathbbN mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN)).","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"To this end, consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"(Pi_n x)_alpha bydef\nbegincases x_alpha  alpha le n\n0  alpha  n\nendcases qquad textfor all  x in ell^1_nu mathbbN","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"as well as the complementary operator Pi_infty(n) bydef I - Pi_n.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"Thus, we have","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"beginaligned\nT(barx) - barx_ell^1_nu mathbbN le Pi_n A Pi_n F(barx)_ell^1_nu mathbbN + frac1n+1 Pi_infty(n) F(barx)_ell^1_nu mathbbN\nDT(barx)_mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN) le maxleft(Pi_n A Pi_n DF(barx) Pi_n - Pi_n_mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN) fracnun+1 2barx - 1_ell^1_nu mathbbNright)\nsup_x in textcl( B_R(barx) ) D^2T(x)_mathscrB(ell^1_nu mathbbN mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN)) le 2 nu left( Pi_n A Pi_n_mathscrB(ell^1_nu mathbbN ell^1_nu mathbbN) + frac1n+1 right)\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"In particular, from the latter estimate, we may freely choose R = infty.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"ν = interval(2)\nX = ℓ¹(GeometricWeight(ν))\nR = Inf\n\nx̄_interval = interval.(x̄)\n\nF_interval = zeros(eltype(x̄_interval), Taylor(2n+1))\nF!(F_interval, x̄_interval)\n\ntail_F_interval = copy(F_interval)\ntail_F_interval[0:n] .= interval(0)\n\nDF_interval = zeros(eltype(x̄_interval), Taylor(n), Taylor(n))\nDF!(DF_interval, x̄_interval)\n\nA = interval.(inv(mid.(DF_interval)))\nbound_tail_A = inv(interval(n+1))\n\n# computation of the bounds\n\nY = norm(A * F_interval, X) + bound_tail_A * norm(tail_F_interval, X)\n\nZ₁ = max(opnorm(A * DF_interval - UniformScaling(interval(1)), X), bound_tail_A * ν * norm(interval(2) * x̄_interval - interval(1), X))\n\nZ₂ = (opnorm(A, X) + bound_tail_A) * ν * interval(2)\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, Z₂, R)","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"The following figure[2] shows the numerical approximation of the proven solution in the interval -2 2 along with the theoretical solution t mapsto (1 + e^-t)^-1.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/ode/logistic_ivp/","page":"Initial value problem of the logistic equation","title":"Initial value problem of the logistic equation","text":"(Image: )","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/norms/#Norms","page":"Norms","title":"Norms","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"The choice of the Banach space to apply the Radii Polynomial Theorem (cf. Section Radii polynomial approach) is integral to the success of the computer-assisted proof. In practice, it is useful to tune the Banach space on the fly to adjust the norm estimates.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Accordingly, the spaces introduced in Section Vector spaces are not normed a priori. The norm of a Sequence or a LinearOperator is obtained via the functions norm and opnorm respectively; in both cases, one must specify a BanachSpace.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"BanachSpace\n├─ NormedCartesianSpace\n├─ Ell1\n├─ Ell2\n└─ EllInf","category":"page"},{"location":"sequence_spaces/norms/#\\ell1,-\\ell2-and-\\ell\\infty","page":"Norms","title":"ell^1, ell^2 and ell^infty","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Let mathscrI be a set of indices such that mathscrI subset mathbbZ^d for some d in mathbbN. Consider the weighted ell^1 ell^2 ell^infty spaces (cf. ell^p spaces) defined by","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"beginaligned\nell^1_w bydef left a in mathbbC^mathscrI     a _ell^1_w bydef sum_alpha in mathscrI a_alpha w(alpha)  infty right \nell^2_w bydef left a in mathbbC^mathscrI     a _ell^2_w bydef sqrtsum_alpha in mathscrI a_alpha^2 w(alpha)  infty right \nell^infty_w bydef left a in mathbbC^mathscrI     a _ell^infty_w bydef sup_alpha in mathscrI  a_alpha  w(alpha)  infty right\nendaligned","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"where w  mathscrI to (0 infty) is a weight function.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"The Banach spaces Ell1, Ell2 and EllInf wraps one or multiple Weight.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Weight\n├─ AlgebraicWeight\n├─ BesselWeight\n├─ GeometricWeight\n└─ IdentityWeight","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Given a set of indices mathscrI^prime subset mathbbZ:","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"an AlgebraicWeight of rate s ge 0 is defined by w(alpha) bydef (1 + alpha)^s for all alpha in mathscrI^prime.\na BesselWeight of rate s ge 0 is defined by w(alpha) bydef (1 + alpha^2)^s for all alpha in mathscrI^prime. This weight is specific to Ell2 and Fourier as it describes the Sobolev space H^s.\na GeometricWeight of rate nu  0 is defined by w(alpha) bydef nu^alpha for all alpha in mathscrI^prime.\nan IdentityWeight is defined by w(alpha) bydef 1 for all alpha in mathscrI^prime. This is the default weight for Ell1, Ell2 and EllInf.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Taylor(2), [1.0, 1.0, 1.0]); # 1 + x + x^2\nnorm(a, Ell1(AlgebraicWeight(1.0)))\nb = Sequence(Fourier(1, 1.0), [0.5, 0.0, 0.5]); # cos(x)\nnorm(b, Ell2(BesselWeight(2.0)))\nc = Sequence(Chebyshev(2), [1.0, 0.5, 0.5]); # 1 + 2(x/2 + (2x^2 - 1)/2)\nnorm(c, EllInf()) # EllInf() == EllInf(IdentityWeight())","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"Note that ℓ¹ (\\ell<tab>\\^1<tab>), ℓ² (\\ell<tab>\\^2<tab>) and ℓ∞ (\\ell<tab>\\infty<tab>) are the respective unicode aliases of Ell1, Ell2 and EllInf.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"In the context of a d-dimensional TensorSpace, one prescribes weights w_1 dots w_d for each dimension. The weight is defined by w(alpha) = w_1(alpha_1) times ldots times w_d(alpha_d) for all alpha = (alpha_1 dots alpha_d) in mathscrI^primeprime where mathscrI^primeprime subset mathbbZ^d is the appropriate set of indices.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = ones(Taylor(2) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(2));\nnorm(a, Ell1((AlgebraicWeight(1.0), GeometricWeight(2.0), IdentityWeight())))","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"However, the d-dimensional version of BesselWeight is defined by w(alpha) bydef (1 + alpha_1^2 + ldots + alpha_d^2)^s for all alpha = (alpha_1 dots alpha_d) in mathbbZ^d. Only one BesselWeight is required for every Fourier space composing the TensorSpace.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = ones(Fourier(2, 1.0) ⊗ Fourier(3, 1.0));\nnorm(a, Ell2(BesselWeight(2.0)))","category":"page"},{"location":"sequence_spaces/norms/#Normed-cartesian-space","page":"Norms","title":"Normed cartesian space","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"For the norm of a CartesianSpace, one may use a NormedCartesianSpace to either:","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"use the same BanachSpace for each space.\nuse a different BanachSpace for each space.","category":"page"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"a = Sequence(Taylor(1)^2, [1.0, 2.0, 3.0, 4.0]);\nnorm(a, NormedCartesianSpace(ℓ¹(), ℓ∞()))\nnorm(a, NormedCartesianSpace((ℓ¹(), ℓ²()), ℓ∞()))","category":"page"},{"location":"sequence_spaces/norms/#API","page":"Norms","title":"API","text":"","category":"section"},{"location":"sequence_spaces/norms/","page":"Norms","title":"Norms","text":"BanachSpace\nnorm\nopnorm\nWeight\nIdentityWeight\nGeometricWeight\ngeometricweight\nAlgebraicWeight\nalgebraicweight\nBesselWeight\nEll1\nℓ¹\nEll2\nℓ²\nEllInf\nℓ∞\nNormedCartesianSpace","category":"page"},{"location":"sequence_spaces/norms/#RadiiPolynomial.BanachSpace","page":"Norms","title":"RadiiPolynomial.BanachSpace","text":"BanachSpace\n\nAbstract type for all Banach spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#LinearAlgebra.norm","page":"Norms","title":"LinearAlgebra.norm","text":"norm(a::AbstractSequence, p::Real=Inf)\n\nCompute the p-norm of a. Only p equal to 1, 2 or Inf is supported.\n\nThis is equivalent to:\n\nnorm(a, Ell1(IdentityWeight())) if p == 1\nnorm(a, Ell2(IdentityWeight())) if p == 2\nnorm(a, EllInf(IdentityWeight())) if p == Inf\n\nSee also: norm(::Sequence, ::BanachSpace).\n\n\n\n\n\nnorm(a::Sequence, X::BanachSpace)\n\nCompute the norm of a by interpreting space(a) as X.\n\nSee also: norm(::Sequence, ::Real=Inf).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#LinearAlgebra.opnorm","page":"Norms","title":"LinearAlgebra.opnorm","text":"opnorm(A::LinearOperator, p::Real=Inf)\n\nCompute the operator norm of A induced by the p-norm. Only p equal to 1, 2 or Inf is supported.\n\nThis is equivalent to:\n\nopnorm(A, Ell1(IdentityWeight())) if p == 1\nopnorm(A, Ell2(IdentityWeight())) if p == 2\nopnorm(A, EllInf(IdentityWeight())) if p == Inf\n\nSee also: opnorm(::LinearOperator, ::BanachSpace), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator, X::BanachSpace, Y::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to domain(A) and Y the Banach space corresponding to codomain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator, X::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to both domain(A) and codomain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator{<:VectorSpace,ParameterSpace}, ::BanachSpace).\n\n\n\n\n\nopnorm(A::LinearOperator{<:VectorSpace,ParameterSpace}, X::BanachSpace)\n\nCompute the operator norm of A where X is the Banach space corresponding to domain(A).\n\nSee also: opnorm(::LinearOperator, ::Real=Inf), opnorm(::LinearOperator, ::BanachSpace, ::BanachSpace) and opnorm(::LinearOperator, ::BanachSpace).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Weight","page":"Norms","title":"RadiiPolynomial.Weight","text":"Weight\n\nAbstract type for all weights.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.IdentityWeight","page":"Norms","title":"RadiiPolynomial.IdentityWeight","text":"IdentityWeight <: Weight\n\nIdentity weight.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.GeometricWeight","page":"Norms","title":"RadiiPolynomial.GeometricWeight","text":"GeometricWeight{T<:Real} <: Weight\n\nGeometric weight associated with a given rate satisfying isfinite(rate) & (rate ≥ 1).\n\nField:\n\nrate :: T\n\nSee also: geometricweight, IdentityWeight, AlgebraicWeight, algebraicweight and BesselWeight.\n\nExamples\n\njulia> w = GeometricWeight(1.0)\nGeometricWeight(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.geometricweight","page":"Norms","title":"RadiiPolynomial.geometricweight","text":"geometricweight(a::Sequence{<:SequenceSpace})\n\nCompute an approximation of the geometric decay rate of a by performing the ordinary least squares method on the logarithm of the absolute value of the coefficients of a.\n\nSee also: GeometricWeight, IdentityWeight, AlgebraicWeight, algebraicweight and BesselWeight.\n\nExamples\n\njulia> rate(geometricweight(Sequence(Taylor(10), [inv(2.0^i) for i in 0:10]))) ≈ 2\ntrue\n\njulia> rate.(geometricweight(Sequence(Taylor(10) ⊗ Fourier(3, 1.0), vec([inv(2.0^i * 3.0^abs(j)) for i in 0:10, j in -3:3])))) .≈ (2, 3)\n(true, true)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.AlgebraicWeight","page":"Norms","title":"RadiiPolynomial.AlgebraicWeight","text":"AlgebraicWeight{T<:Real} <: Weight\n\nAlgebraic weight associated with a given rate satisfying isfinite(rate) & (rate ≥ 0).\n\nField:\n\nrate :: T\n\nSee also: algebraicweight, IdentityWeight, GeometricWeight, geometricweight and BesselWeight.\n\nExamples\n\njulia> w = AlgebraicWeight(1.0)\nAlgebraicWeight(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.algebraicweight","page":"Norms","title":"RadiiPolynomial.algebraicweight","text":"algebraicweight(a::Sequence{<:SequenceSpace})\n\nCompute an approximation of the algebraic decay rate of a by performing the ordinary least squares method on the logarithm of the absolute value of the coefficients of a.\n\nSee also: AlgebraicWeight, IdentityWeight, GeometricWeight, geometricweight and BesselWeight.\n\nExamples\n\njulia> rate(algebraicweight(Sequence(Taylor(10), [inv((1.0 + i)^2) for i in 0:10]))) ≈ 2\ntrue\n\njulia> rate.(algebraicweight(Sequence(Taylor(10) ⊗ Fourier(3, 1.0), vec([inv((1.0 + i)^2 * (1.0 + abs(j))^3) for i in 0:10, j in -3:3])))) .≈ (2, 3)\n(true, true)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/norms/#RadiiPolynomial.BesselWeight","page":"Norms","title":"RadiiPolynomial.BesselWeight","text":"BesselWeight{T<:Real} <: Weight\n\nBessel weight associated with a given rate satisfying isfinite(rate) & (rate ≥ 0).\n\nField:\n\nrate :: T\n\nSee also: IdentityWeight, GeometricWeight, geometricweight, AlgebraicWeight and algebraicweight.\n\nExamples\n\njulia> w = BesselWeight(1.0)\nBesselWeight(1.0)\n\njulia> rate(w)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Ell1","page":"Norms","title":"RadiiPolynomial.Ell1","text":"Ell1{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^1 space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEll1(::Weight)\nEll1(::Tuple{Vararg{Weight}})\nEll1(): equivalent to Ell1(IdentityWeight())\nEll1(weight::Weight...): equivalent to Ell1(weight)\n\nUnicode alias ℓ¹ can be typed by \\ell<tab>\\^1<tab> in the Julia REPL and in many editors.\n\nSee also: Ell2 and EllInf.\n\nExamples\n\njulia> Ell1()\nℓ¹()\n\njulia> Ell1(GeometricWeight(1.0))\nℓ¹(GeometricWeight(1.0))\n\njulia> Ell1(GeometricWeight(1.0), AlgebraicWeight(2.0))\nℓ¹(GeometricWeight(1.0), AlgebraicWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ¹","page":"Norms","title":"RadiiPolynomial.ℓ¹","text":"ℓ¹(::Weight)\nℓ¹(::Tuple{Vararg{Weight}})\nℓ¹()\nℓ¹(::Weight...)\n\nUnicode alias of Ell1 representing the weighted ell^1 space.\n\nExamples\n\njulia> ℓ¹()\nℓ¹()\n\njulia> ℓ¹(GeometricWeight(1.0))\nℓ¹(GeometricWeight(1.0))\n\njulia> ℓ¹(GeometricWeight(1.0), AlgebraicWeight(2.0))\nℓ¹(GeometricWeight(1.0), AlgebraicWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.Ell2","page":"Norms","title":"RadiiPolynomial.Ell2","text":"Ell2{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^2 space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEll2(::Weight)\nEll2(::Tuple{Vararg{Weight}})\nEll2(): equivalent to Ell2(IdentityWeight())\nEll2(weight::Weight...): equivalent to Ell2(weight)\n\nUnicode alias ℓ² can be typed by \\ell<tab>\\^2<tab> in the Julia REPL and in many editors.\n\nSee also: Ell1 and EllInf.\n\nExamples\n\njulia> Ell2()\nℓ²()\n\njulia> Ell2(BesselWeight(1.0))\nℓ²(BesselWeight(1.0))\n\njulia> Ell2(BesselWeight(1.0), GeometricWeight(2.0))\nℓ²(BesselWeight(1.0), GeometricWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ²","page":"Norms","title":"RadiiPolynomial.ℓ²","text":"ℓ²(::Weight)\nℓ²(::Tuple{Vararg{Weight}})\nℓ²()\nℓ²(::Weight...)\n\nUnicode alias of Ell2 representing the weighted ell^2 space.\n\nExamples\n\njulia> ℓ²()\nℓ²()\n\njulia> ℓ²(BesselWeight(1.0))\nℓ²(BesselWeight(1.0))\n\njulia> ℓ²(BesselWeight(1.0), GeometricWeight(2.0))\nℓ²(BesselWeight(1.0), GeometricWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.EllInf","page":"Norms","title":"RadiiPolynomial.EllInf","text":"EllInf{T<:Union{Weight,Tuple{Vararg{Weight}}}} <: BanachSpace\n\nWeighted ell^infty space.\n\nField:\n\nweight :: T\n\nConstructors:\n\nEllInf(::Weight)\nEllInf(::Tuple{Vararg{Weight}})\nEllInf(): equivalent to EllInf(IdentityWeight())\nEllInf(weight::Weight...): equivalent to EllInf(weight)\n\nUnicode alias ℓ∞ can be typed by \\ell<tab>\\infty<tab> in the Julia REPL and in many editors.\n\nSee also: Ell1 and Ell2.\n\nExamples\n\njulia> EllInf()\nℓ∞()\n\njulia> EllInf(GeometricWeight(1.0))\nℓ∞(GeometricWeight(1.0))\n\njulia> EllInf(GeometricWeight(1.0), AlgebraicWeight(2.0))\nℓ∞(GeometricWeight(1.0), AlgebraicWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.ℓ∞","page":"Norms","title":"RadiiPolynomial.ℓ∞","text":"ℓ∞(::Weight)\nℓ∞(::Tuple{Vararg{Weight}})\nℓ∞()\nℓ∞(::Weight...)\n\nUnicode alias of EllInf representing the weighted ell^infty space.\n\nExamples\n\njulia> ℓ∞()\nℓ∞()\n\njulia> ℓ∞(GeometricWeight(1.0))\nℓ∞(GeometricWeight(1.0))\n\njulia> ℓ∞(GeometricWeight(1.0), AlgebraicWeight(2.0))\nℓ∞(GeometricWeight(1.0), AlgebraicWeight(2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/norms/#RadiiPolynomial.NormedCartesianSpace","page":"Norms","title":"RadiiPolynomial.NormedCartesianSpace","text":"NormedCartesianSpace{T<:Union{BanachSpace,Tuple{Vararg{BanachSpace}}},S<:BanachSpace} <: BanachSpace\n\nCartesian Banach space.\n\nFields:\n\ninner :: T\nouter :: S\n\nSee also: Ell1, Ell2 and EllInf.\n\nExamples\n\njulia> NormedCartesianSpace(Ell1(), EllInf())\nNormedCartesianSpace(ℓ¹(), ℓ∞())\n\njulia> NormedCartesianSpace((Ell1(), Ell2()), EllInf())\nNormedCartesianSpace((ℓ¹(), ℓ²()), ℓ∞())\n\n\n\n\n\n","category":"type"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/#Unstable-manifolds-of-equilibria-of-the-cubic-Ikeda-equation","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"","category":"section"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"In this example, we will rigorously compute the unstable manifolds of the equilibria for the cubic Ikeda equation","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"fracddt u(t) = f(u(t) u(t-tau)) bydef u(t-tau) - u(t-tau)^3","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The linearization at some equilibrium c in mathbbR yields","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"fracddt v(t) = (1 - 3c^2) v(t-tau)","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The right-hand side of the above equation is an infinite dimensional endomorphism acting on C(-tau 0 mathbbR). Its compactness guarantees that the spectrum is comprised of eigenvalues accumulating at 0; in particular, there are finitely many eigenvalues whose real parts are strictly positive. As a matter of fact, an eigenvector xi in C(-tau 0 mathbbC) associated with an eigenvalue lambda in mathbbC is given by xi(s) = e^s lambda xi(0), for all s in -tau 0 and xi(0) neq 0, such that","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Psi(lambda) bydef lambda - (1 - 3c^2) e^-tau lambda = 0","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The characteristic function Psi and its derivative with respect to lambda, denoted DPsi, may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Ψ(λ, c, τ) = λ - (1 - 3c^2) * exp(-τ*λ)\n\nDΨ(λ, c, τ) = 1 + τ * (1 - 3c^2) * exp(-τ*λ)\nnothing # hide","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the cubic Ikeda equation, the equilibria are 0, 1 or -1. For the equilibrium c = 0, there is a unique real unstable eigenvalue. While for the equilibria c = 1 and c = -1, there are two complex conjugate unstable eigenvalues.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the equilibrium c = 0, we may use the first-order Radii Polynomial Theorem to rigorously compute the unstable eigenvalue:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"using RadiiPolynomial\n\nλ̄₀, success = newton(λ -> (Ψ(λ, 0.0, 1.59), DΨ(λ, 0.0, 1.59)), 0.5)\n\nR = 1e-14\n\nτ = I\"1.59\"\n\nY = abs(Ψ(interval(λ̄₀), interval(0), τ))\nZ₁ = abs(1 - interval(DΨ(λ̄₀, 0, mid(τ))) \\ DΨ(interval(λ̄₀, R; format = :midpoint), interval(0), τ))\nϵ₀ = inf(interval_of_existence(Y, Z₁, R))\nλ₀ = interval(λ̄₀, ϵ₀; format = :midpoint)\n\nsetdisplay(:full)\n\nλ₀","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, for the equilibria c = 1 and c = -1, we may use the same strategy to compute one of the two complex conjugate unstable eigenvalues:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"λ̄₁, success = newton(λ -> (Ψ(λ, 1.0, 1.59), DΨ(λ, 1.0, 1.59)), 0.3+1.0im)\n\nY = abs(Ψ(interval(λ̄₁), interval(1), τ))\nZ₁ = abs(1 - interval(DΨ(λ̄₁, 1, τ)) \\ DΨ(interval(λ̄₁, R; format = :midpoint), interval(1), τ))\nϵ₁ = inf(interval_of_existence(Y, Z₁, R))\nλ₁ = interval(λ̄₁, ϵ₁; format = :midpoint)\n\nsetdisplay(:full)\n\nλ₁","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let lambda_1 dots lambda_d be the unstable eigenvalues and xi_1 dots xi_d the respective eigenvectors. Denote by Lambda  mathbbC^d to mathbbC^d the diagonal matrix such that Lambda_ii bydef lambda_i; also, denote by Xi  mathbbC^d to C(-tau 0 mathbbC) the matrix whose i-th column is the eigenvector xi_i.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"X bydef left  x_alpha _alpha_1 + ldots + alpha_d ge 0 in mathbbC^(mathbbN cup 0)^d     x _X bydef sum_alpha_1 + ldots + alpha_d ge 0 x_alpha  +infty right","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"and *  X times X to X be the Cauchy product given by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"x * y bydef left sum_beta_1 + ldots + beta_d ge 0^alpha x_alpha - beta y_beta right_alpha_1 + ldots + alpha_d ge 0 qquad textfor all  x y in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For any sequence x in X, the Taylor series sum_alpha_1 + ldots + alpha_d ge 0 x_alpha sigma^alpha defines an analytic function in C^omega(mathbbD^d mathbbC) where mathbbD bydef  z in mathbbC    z le 1 ; while the Cauchy product * corresponds to the product of Taylor series in sequence space.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The Banach space X is a suitable space to represent a parameterization of the unstable manifold. Indeed, it is a standard result from DDE theory that analytic vector fields yield analytic unstable manifolds of equilibria. In the context of this example, it holds that the unstable manifold is parameterized by an analytic function P  mathbbC^d to C(-tau 0 mathbbC) satisfying fracdds P(sigma)(s) = DP(sigma) Lambda sigma(s) along with DP(sigma) Lambda sigma(0) = f(P (sigma)(0) P(sigma)(-tau)).[1]","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"[1]: O. Hénot, J.-P. Lessard and J. D. Mireles James, Parameterization of unstable manifolds for DDEs: formal series solutions and validated error bounds, Journal of Dynamics and Differential Equations, 34 (2022), 1285-1324.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"In terms of the Taylor coefficients, the previous equalities yield","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"P(sigma)(s) = sum_alpha_1 + ldots + alpha_d ge 0 tildex_alpha e^s (alpha_1 lambda_1 + ldots + alpha_d lambda_d) sigma^alpha","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"where tildex in X is given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"tildex_alpha bydef\nbegincases\nc  alpha_1 = ldots = alpha_d = 0\nxi_1  alpha_1 = 1 alpha_2 = ldots = alpha_d = 0\nvdots\nxi_d  alpha_d = 1 alpha_1 = ldots = alpha_d-1 = 0\nPsi(alpha_1 lambda_1 + ldots + alpha_d lambda_d)^-1 left(-e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) tildex * tildex * tildex_tildex_alpha = 0right)_alpha  alpha_1 + ldots + alpha_d ge 2\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Observe that the unstable manifold of the equilibrium c = -1 is the same as the of the equilibrium c = 1 modulo a change of sign. Thus, we shall only study the unstable manifolds of the equilibria c = 0 and c = 1.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"For the equilibrium c = 0, we may implement the 1-dimensional recurrence relation as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"n₀ = 85\nx̃₀ = zeros(Interval{Float64}, Taylor(n₀))\nx̃₀[1] = interval(5)\nỹ₀ = copy(x̃₀)\nỹ₀[1] *= exp(-τ * λ₀)\nfor α ∈ 2:n₀\n    x̃₀[α] = -Ψ(α*λ₀, interval(0), τ) \\ pow_bar(Sequence(Taylor(α), view(ỹ₀, 0:α)), 3)[α]\n    ỹ₀[α] = x̃₀[α] * exp(-τ * α*λ₀)\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, for the equilibrium c = 1, we may implement the 2-dimensional recurrence relation as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"n₁ = 25\nx̃₁ = zeros(Complex{Interval{Float64}}, Taylor(n₁) ⊗ Taylor(n₁))\nx̃₁[(0,0)] = interval(1)\nx̃₁[(1,0)] = x̃₁[(0,1)] = interval(0.35)\nỹ₁ = copy(x̃₁)\nỹ₁[(1,0)] *= exp(-τ * λ₁)\nỹ₁[(0,1)] *= exp(-τ * conj(λ₁))\nfor α₂ ∈ 0:n₁, α₁ ∈ 0:n₁-α₂\n    if α₁ + α₂ ≥ 2\n        x̃₁[(α₁,α₂)] = -Ψ(α₁*λ₁ + α₂*conj(λ₁), interval(1), τ) \\ pow_bar(Sequence(Taylor(α₁) ⊗ Taylor(α₂), view(ỹ₁, (0:α₁, 0:α₂))), 3)[(α₁,α₂)]\n        ỹ₁[(α₁,α₂)] = x̃₁[(α₁,α₂)] * exp(-τ * (α₁*λ₁ + α₂*conj(λ₁)))\n    end\nend","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Consider the truncation operator","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"(Pi_n x)_alpha bydef\nbegincases x_alpha  alpha_1 + ldots + alpha_d le n\n0  alpha_1 + ldots + alpha_d  n\nendcases\nqquad textfor all  x in X","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"as well as the complementary operator Pi_infty(n) bydef I - Pi_n.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Given that Pi_n tildex is a finite sequence of known Taylor coefficients, it follows that the remaining coefficients are a fixed-point of the mapping T  Pi_infty(n) X to Pi_infty(n) X given component-wise by","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"( T(h) )_alpha bydef\nbegincases\n0  alpha_1 + ldots + alpha_d le n\nPsi(alpha_1 lambda_1 + ldots + alpha_d lambda_d)^-1 left( -e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) (Pi_n tildex +h)*(Pi_n tildex +h)*(Pi_n tildex +h)_h_alpha = 0 right)_alpha  alpha_1 + ldots + alpha_d  n\nendcases","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Let R  0. Since T in C^1(Pi_infty(n) X Pi_infty(n) X) we may use the first-order Radii Polynomial Theorem for which we use the estimates","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"beginaligned\nT(0)_X le max_mu in Re(lambda_1) dots Re(lambda_d) frac1(n+1)mu - 1 - 3c^2 e^-τ (n+1)mu Pi_infty(n) (Pi_n tildey*Pi_n tildey*Pi_n tildey)_X\nsup_h in textcl( B_R(0) ) DT(h)_mathscrB(X X) le max_mu in Re(lambda_1) dots Re(lambda_d) frac3(n+1)mu - 1 - 3c^2 e^-τ (n+1)mu (Pi_n tildey_X + R)^2\nendaligned","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"where tildey bydef left tildex_alpha e^-tau (alpha_1 lambda_1 + ldots + alpha_d lambda_d) right_alpha_1 + ldots + alpha_d ge 0.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The computer-assisted proof for the 1-dimensional unstable manifold of c = 0 may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"X = ℓ¹()\n\nR = 1e-12\n\ntail_ỹ₀³ = ỹ₀ ^ 3\ntail_ỹ₀³[0:n₀] .= interval(0)\nC₀ = interval(n₀+1) * λ₀ - exp(-τ * interval(n₀+1) * λ₀)\n\nY = C₀ \\ norm(tail_ỹ₀³, X)\n\nZ₁ = C₀ \\ (interval(3) * (norm(ỹ₀, X) + R)^2)\n\n# error bound for the Taylor coefficients of order α > 85 of the parameterization on the domain [-1, 1]\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, R)","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"Similarly, the computer-assisted proof for the 2-dimensional unstable manifold of c = 1 may be implemented as follows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"tail_ỹ₁³ = ỹ₁ ^ 3\nfor α₂ ∈ 0:n₁, α₁ ∈ 0:n₁-α₂\n    tail_ỹ₁³[(α₁,α₂)] = interval(0)\nend\nC₁ = interval(n₁+1) * real(λ₁) - interval(2) * exp(-τ * interval(n₁+1) * real(λ₁))\n\nY = C₁ \\ norm(tail_ỹ₁³, X)\n\nZ₁ = C₁ \\ (interval(3) * (norm(ỹ₁, X) + R)^2)\n\n# error bound for the Taylor coefficients of order α₁ + α₂ > 25 of the parameterization on the domain 𝔻²\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, R)","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"The following animation[2] shows:","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"the equilibria 0 pm 1 (red markers).\nthe numerical approximation of the parameterization of the 1D unstable manifold of 0: on the domain of the computer-assisted proof -1 1 (green line) and on a larger domain (black line).\nthe numerical approximation of the parameterization of the 2D unstable manifold of pm 1: on the domain of the computer-assisted proof mathbbD^2 (blue surfaces) and on a larger domain (black wireframes).","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/infinite_dimensional_proofs/dde/ikeda_W_u/","page":"Unstable manifolds of equilibria of the cubic Ikeda equation","title":"Unstable manifolds of equilibria of the cubic Ikeda equation","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../ikeda_W_u.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/#Spiderweb-central-configurations","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"","category":"section"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"In this example, we will prove the existence and local uniqueness of a central configuration in the N-body problem.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"More precisely, we will look at configurations given by N = n times ell+1 masses located at the intersection points of ell concurrent equidistributed half-lines with n circles and a central mass m_0. The ell masses on the i-th circle are equal to a positive constant m_i and we allow the particular case m_0 = 0. These central configurations are called spiderweb central configurations.[1]","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"[1]: O. Hénot and C. Rousseau, Spiderweb central configurations, Qualitative Theory of Dynamical Systems, 18 (2019), 1135–1160.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The N-body problem consists in describing the positions mathbfr_1(t)dotsmathbfr_N(t) of N masses m_1dotsm_N interacting through Newton's gravitational law:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"m_i fracd^2dt^2 mathbfr_i\n=\n-sum_jneq i fracG m_i m_j(mathbfr_i - mathbfr_j) mathbfr_i - mathbfr_j ^3\n=\n-fracpartialpartial mathbfr_i U (mathbfr)\nqquad\nU (mathbfr)\nbydef\n-sum_ij fracG m_i m_jmathbfr_i - mathbfr_j","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"for i = 1dotsN, with mathbfr in  (mathbfr_1dotsmathbfr_N) in mathbbR^3N    mathbfr_i neq mathbfr_j   i neq j, where G denotes the gravitational constant.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"In the following, we fix the centre of mass at the origin and scale G = 1. Moreover, due to the symmetries of a spiderweb central configuration, it is sufficient to consider the accelerations of the n bodies on the positive horizontal axis, and the numbers r_1 dots r_n also denote the positions of the masses on this semi-axis.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The configuration of N bodies is central at some time t^* if fracd^2dt^2mathbfr(t^*) = lambda mathbfr(t^*) for some common lambda. It is easy to see that lambda is a strictly negative value given by lambda = U(mathbfr)I(mathbfr)  0 where I bydef sum_i = 1^N m_i mathbfr_i(mathbfr)^2 is the moment of inertia. Essentially, the value of lambda scales the system and can be chosen arbitrarily.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Then, the original system of ODEs reduces to the following system of equations in mathbbR^n:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"lambda r_i\n=\n-sum_k=1^ell-1 fracm_i2^32r_i^2(1 - cos(theta_k))^12 -fracm_0r_i^2 - sum_beginsmallmatrixj=1jneq i endsmallmatrix^n sum_k=0^ell-1 fracm_j(r_i - r_j cos(theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^32","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"for i = 1 dots n, with theta_k bydef frac2pi kell and r = (r_1dotsr_n) in mathbbR^n.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Thus, a spiderweb central configuration is a zero of the mapping F bydef (F_1 dots F_n)  mathbbR^n to mathbbR^n given by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"F_i(r) bydef\nlambda r_i + fracm_0r_i^2 + fracm_i2^32r_i^2zeta_ell + sum_beginsmallmatrixj = 1  j neq i endsmallmatrix^n sum_k=0^ell-1 fracm_j(r_i - r_j cos(theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^32  qquad i = 1 dots n","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"where zeta_ell bydef sum_k=1^ell-1 (1 - cos(theta_k))^-12.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The Jacobian matrix is given by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"fracpartialpartial r_j F_i(r) =\nbegincases\ndisplaystyle lambda - frac2m_0r_i^3 - fracm_ir_i^3sqrt2zeta_ell\n-sum_beginsmallmatrixj = 1  j neq iendsmallmatrix^n fracm_j2sum_k=0^ell-1\nfrac4r_i^2 + r_j^2 - 8 r_i r_j cos(theta_k) + 3 r_j^2 cos(2theta_k)(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^52  j = i\ndisplaystyle -fracm_j2 sum_k=0^ell-1\nfrac-4(r_i^2 + r_j^2) cos(theta_k) + r_i r_j (7 + cos(2theta_k))(r_i^2 + r_j^2 - 2 r_i r_j cos(theta_k))^52  j neq i\nendcases","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The mapping F and its Jacobian, denoted DF, may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"function F(x, m₀, m, λ, l)\n    T = eltype(x)\n    n = length(x)\n    π2l⁻¹ = 2convert(T, π)/l\n    F_ = Vector{T}(undef, n)\n    for i ∈ 1:n\n        F_[i] = λ*x[i] + m₀/x[i]^2\n        for k ∈ 1:l-1\n            θₖ = k*π2l⁻¹\n            F_[i] += m[i]/(2x[i]^2 * sqrt(2 - 2cos(θₖ)))\n        end\n        for j ∈ 1:n\n            if i ≠ j\n                for k ∈ 0:l-1\n                    θₖ = k*π2l⁻¹\n                    F_[i] += m[j]*(x[i] - x[j]*cos(θₖ))/sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^3\n                end\n            end\n        end\n    end\n    return F_\nend\n\nfunction DF(x, m₀, m, λ, l)\n    T = eltype(x)\n    n = length(x)\n    π2l⁻¹ = 2convert(T, π)/l\n    DF_ = zeros(T, n, n)\n    for j ∈ 1:n, i ∈ 1:n\n        if i == j\n            DF_[i,i] += λ - 2m₀/x[i]^3\n            for k ∈ 1:l-1\n                θₖ = k*π2l⁻¹\n                DF_[i,i] -= m[i]/(x[i]^3 * sqrt(2 - 2cos(θₖ)))\n            end\n        else\n            for k ∈ 0:l-1\n                θₖ = k*π2l⁻¹\n                DF_[i,i] -= m[j]*(4x[i]^2 + x[j]^2 - 8x[i]*x[j]*cos(θₖ) + 3x[j]^2*cos(2θₖ))/(2sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^5)\n                DF_[i,j] -= m[j]*(-4(x[i]^2 + x[j]^2)*cos(θₖ) + x[i]*x[j]*(7 + cos(2θₖ)))/(2sqrt(x[i]^2 + x[j]^2 - 2x[i]*x[j]*cos(θₖ))^5)\n            end\n        end\n    end\n    return DF_\nend\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Consider the fixed-point operator T  mathbbR^n to mathbbR^n defined by","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"T(x) bydef x - A F(x)","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"where A  mathbbR^n to mathbbR^n is the injective operator corresponding to a numerical approximation of DF(x_0)^-1 for some numerical zero x_0 in mathbbR^n of F.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Given an initial guess, the numerical zero x_0 of F may be obtained by Newton's method:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"using RadiiPolynomial\n\nn = 18 # number of circles\nl = 100 # number of masses per circle\n\nm₀ = 0.0 # central mass\nm = fill(1/l, n) # vector of masses\nλ = -1.0\n\nx₀ = collect(range(1.0; stop = 3.0, length = n))\n\nx₀, success = newton(x -> (F(x, m₀, m, λ, l), DF(x, m₀, m, λ, l)), x₀)\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"Let R  0. According to the first-order Radii Polynomial Theorem (cf. Section Radii polynomial approach), we need to estimate T(x_0) - x_0_infty and sup_x in textcl( B_R(x_0) ) DT(x)_infty which can be readily computed with interval arithmetic.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"R = 1e-12\n\nm₀_interval = interval(0.0)\nm_interval = fill(inv(interval(l)), n)\nλ_interval = interval(-1.0)\n\nx₀_interval = interval.(x₀)\nx₀R_interval = interval.(x₀_interval, R; format = :midpoint)\n\nF_interval = F(x₀_interval, m₀_interval, m_interval, λ_interval, l)\nDF_interval = DF(x₀R_interval, m₀_interval, m_interval, λ_interval, l)\n\nA = inv(mid.(DF_interval))\n\nY = norm(Sequence(A * F_interval), Inf)\n\nZ₁ = opnorm(LinearOperator(A * DF_interval - I), Inf)\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, R)","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"The following animation[2] shows the numerical approximation of the proven spiderweb central configuration for some given initial velocity.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"[2]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/finite_dimensional_proofs/spiderweb/","page":"Spiderweb central configurations","title":"Spiderweb central configurations","text":"<video width=\"800\" height=\"400\" controls autoplay loop>\n  <source src=\"../spiderweb.mp4\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/special_operators/#Special-operators","page":"Special operators","title":"Special operators","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"In this section, we present several operations common to dynamical systems.","category":"page"},{"location":"sequence_spaces/special_operators/#Projection","page":"Special operators","title":"Projection","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"When working with SequenceSpace, one frequently needs to adjust the order of truncation of the chosen basis. This operation is implemented as the project and project! functions. In fact, these functions provide a general mechanism to retrieve a finite part of the infinite dimensional operators introduced later in this section.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Each project or project! call verifies a compatibility criterion between spaces. For Sequence and LinearOperator, two VectorSpace are compatible if:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"all comprised SequenceSpace only differ from their order. For instance, Taylor(n) and Taylor(m) are compatible for any positive n::Int and m::Int. However, Taylor(n) and TensorSpace(Taylor(m), Fourier(k, 1.0)) are not compatible for any positive n::Int, m::Int and k::Int.\nall comprised CartesianSpace have the same number of cartesian products. For instance, CartesianPower(a, 2) and CartesianProduct(a, a) are compatible for any a::VectorSpace. However, CartesianProduct(a, b) and CartesianProduct(CartesianPower(a, 1), b) are not compatible for any a::VectorSpace and b::VectorSpace.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A = LinearOperator(Taylor(1) ⊗ Chebyshev(1), Taylor(1) ⊗ Chebyshev(1), [1 0 0 0 ; 0 1 0 0 ; 0 0 1 0 ; 0 0 0 1]) # project(I, Taylor(1) ⊗ Chebyshev(1), Taylor(1) ⊗ Chebyshev(1))\nproject(A, Taylor(1) ⊗ Chebyshev(2), Taylor(2) ⊗ Chebyshev(1))","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Moreover, the following identifications are permitted:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(1), [1, 1]) # 1 + x\nA = project(a, ParameterSpace(), Taylor(2))\nproject(A, space(a))","category":"page"},{"location":"sequence_spaces/special_operators/#Multiplication","page":"Special operators","title":"Multiplication","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Let V be a SequenceSpace with discrete convolution * and a in V. The multiplication operator Multiplication represents the mapping mathcalM_a  V to V defined by","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"mathcalM_a (b) bydef a * b qquad textfor all  b in V","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The action of Multiplication is performed by the right product * of a Multiplication with a Sequence{<:SequenceSpace}; alternatively, Multiplication defines a method on a Sequence{<:SequenceSpace} representing *.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(1), [1, 1]); # 1 + x\nb = Sequence(Taylor(2), [0, 0, 1]); # x^2\na * b\nℳ = Multiplication(a)\nℳ * b # ℳ(b)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Multiplication may be obtained via project or project!.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(ℳ, Taylor(2), image(*, Taylor(1), Taylor(2)))","category":"page"},{"location":"sequence_spaces/special_operators/#Derivation-and-integration","page":"Special operators","title":"Derivation and integration","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Both Derivative and Integral have a field order::Union{Int,Tuple{Vararg{Int}}} to specify how many times the operator is composed with itself. No derivation or integration is performed whenever a value of 0 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]); # 1 + x + x^2\ndifferentiate(a)\n𝒟 = Derivative(1)\n𝒟 * a # 𝒟(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Derivative and Integral may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Derivative(1), Taylor(2), image(Derivative(1), Taylor(2)), Float64)\nproject(Integral(1), Taylor(2), image(Integral(1), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Evaluation","page":"Special operators","title":"Evaluation","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The evaluation operator Evaluation has a field value::Union{Number,Nothing,Tuple{Vararg{Union{Number,Nothing}}}} representing the evaluation point. No scaling is performed whenever a value of nothing is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]); # 1 + x + x^2\nevaluate(a, 0.1)\nℰ = Evaluation(0.1)\nℰ * a # ℰ(a)\nb = Sequence(Taylor(1) ⊗ Fourier(1, 1.0), [0.5, 0.5, 0.0, 0.0, 0.5, 0.5]); # (1 + x) cos(y)\nevaluate(b, (0.1, nothing)) # Evaluation(0.1, nothing) * b","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Moreover, Evaluation is defined on CartesianSpace by acting component-wise.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"c = Sequence(Taylor(1)^2, [1, 1, 2, 2]); # 1 + x, 2 + 2x\nevaluate(c, 0.1) # Evaluation(0.1) * c","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Evaluation may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Evaluation(0.1), Taylor(2), image(Evaluation(0.1), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"Furthermore, in the context of Evaluation, the concept of compatibility between two VectorSpace is more permissive to allow manipulating Evaluation more like a functional:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Evaluation(0.1), Taylor(2), ParameterSpace(), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Scale","page":"Special operators","title":"Scale","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The scale operator Scale has a field value::Union{Number,Tuple{Vararg{Number}}} representing the scaling factor. No scaling is performed whenever a value of 1 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"note: Note\nCurrently, only Taylor and Fourier spaces allow values different than 1.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Taylor(2), [1, 1, 1]) # 1 + x + x^2\nscale(a, 2)\n𝒮 = Scale(2)\n𝒮 * a # 𝒮(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Scale may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Scale(2), Taylor(2), image(Scale(2), Taylor(2)), Float64)","category":"page"},{"location":"sequence_spaces/special_operators/#Shift","page":"Special operators","title":"Shift","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"The shift operator Shift has a field value::Union{Number,Tuple{Vararg{Number}}} representing the shift. No shift is performed whenever a value of 0 is given.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"note: Note\nCurrently, only Fourier space allows values different than 0.","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"a = Sequence(Fourier(1, 1.0), [0.5, 0.0, 0.5]) # cos(x)\nshift(a, π)\n𝒮 = Shift(π)\n𝒮 * a # 𝒮(a)","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"A finite dimensional truncation of Shift may be obtained via project or project!:","category":"page"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project(Shift(π), Fourier(1, 1.0), image(Shift(π), Fourier(1, 1.0)), Complex{Float64})","category":"page"},{"location":"sequence_spaces/special_operators/#API","page":"Special operators","title":"API","text":"","category":"section"},{"location":"sequence_spaces/special_operators/","page":"Special operators","title":"Special operators","text":"project\nproject!\nMultiplication\nDerivative\ndifferentiate\ndifferentiate!\nIntegral\nintegrate\nintegrate!\nEvaluation\nevaluate\nevaluate!\nScale\nscale\nscale!\nShift\nshift\nshift!","category":"page"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.project","page":"Special operators","title":"RadiiPolynomial.project","text":"project(a::Sequence, space_dest::VectorSpace, ::Type{T}=eltype(a))\n\nRepresent a as a Sequence in space_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(A::LinearOperator{ParameterSpace,<:VectorSpace}, space_dest::VectorSpace, ::Type{T}=eltype(A))\n\nRepresent A as a Sequence in space_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(J::UniformScaling, domain_dest::VectorSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(J))\n\nRepresent J as a LinearOperator from domain_dest to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(A::LinearOperator, domain_dest::VectorSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(A))\n\nRepresent A as a LinearOperator from domain_dest to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(a::Sequence, ::ParameterSpace, codomain_dest::VectorSpace, ::Type{T}=eltype(a))\n\nRepresent a as a LinearOperator from ParameterSpace to codomain_dest.\n\nSee also: project!.\n\n\n\n\n\nproject(ℳ::Multiplication, domain::SequenceSpace, codomain::SequenceSpace, ::Type{T}=eltype(sequence(ℳ)))\n\nRepresent ℳ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ::Multiplication) and Multiplication.\n\n\n\n\n\nproject(𝒟::Derivative, domain::VectorSpace, codomain::VectorSpace, ::Type{T}=_coeftype(𝒟, domain, Float64))\n\nRepresent 𝒟 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Derivative) and Derivative.\n\n\n\n\n\nproject(ℐ::Integral, domain::VectorSpace, codomain::VectorSpace, ::Type{T}=_coeftype(ℐ, domain, Float64))\n\nRepresent ℐ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Integral) and Integral.\n\n\n\n\n\nproject(ℰ::Evaluation, domain::VectorSpace, codomain::VectorSpace, ::Type{T}=_coeftype(ℰ, domain, Float64))\n\nRepresent ℰ as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Evaluation) and Evaluation.\n\n\n\n\n\nproject(𝒮::Scale, domain::VectorSpace, codomain::VectorSpace, ::Type{T}=_coeftype(𝒮, domain, Float64))\n\nRepresent 𝒮 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Scale) and Scale\n\n\n\n\n\nproject(𝒮::Shift, domain::VectorSpace, codomain::VectorSpace, ::Type{T}=_coeftype(𝒮, domain, Float64))\n\nRepresent 𝒮 as a LinearOperator from domain to codomain.\n\nSee also: project!(::LinearOperator, ::Shift) and Shift.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.project!","page":"Special operators","title":"RadiiPolynomial.project!","text":"project!(c::Sequence, a::Sequence)\n\nRepresent a as a Sequence in space(c). The result is stored in c by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(c::Sequence, A::LinearOperator{ParameterSpace,<:VectorSpace})\n\nRepresent A as a Sequence in space(c). The result is stored in c by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator, J::UniformScaling)\n\nRepresent J as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator, A::LinearOperator)\n\nRepresent A as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator{ParameterSpace,<:VectorSpace}, a::Sequence)\n\nRepresent a as a LinearOperator from ParameterSpace to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project.\n\n\n\n\n\nproject!(C::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ℳ::Multiplication)\n\nRepresent ℳ as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Multiplication, ::SequenceSpace, ::SequenceSpace) and Multiplication.\n\n\n\n\n\nproject!(C::LinearOperator, 𝒟::Derivative)\n\nRepresent 𝒟 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Derivative, ::VectorSpace, ::VectorSpace) and Derivative.\n\n\n\n\n\nproject!(C::LinearOperator, ℐ::Integral)\n\nRepresent ℐ as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Integral, ::VectorSpace, ::VectorSpace) and Integral\n\n\n\n\n\nproject!(C::LinearOperator, ℰ::Evaluation)\n\nRepresent ℰ as a LinearOperator from domain to codomain. The result is stored in C by overwriting it.\n\nSee also: project(::Evaluation, ::VectorSpace, ::VectorSpace) and Evaluation.\n\n\n\n\n\nproject!(C::LinearOperator, 𝒮::Scale)\n\nRepresent 𝒮 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Scale, ::VectorSpace, ::VectorSpace) and Scale\n\n\n\n\n\nproject!(C::LinearOperator, 𝒮::Shift)\n\nRepresent 𝒮 as a LinearOperator from domain(C) to codomain(C). The result is stored in C by overwriting it.\n\nSee also: project(::Shift, ::VectorSpace, ::VectorSpace) and Shift.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Multiplication","page":"Special operators","title":"RadiiPolynomial.Multiplication","text":"Multiplication{T<:Sequence{<:SequenceSpace}} <: SpecialOperator\n\nMultiplication operator associated with a given Sequence.\n\nField:\n\nsequence :: T\n\nConstructor:\n\nMultiplication(::Sequence{<:SequenceSpace})\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), project(::Multiplication, ::SequenceSpace, ::SequenceSpace), project!(::LinearOperator{<:SequenceSpace,<:SequenceSpace}, ::Multiplication) and Multiplication.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Derivative","page":"Special operators","title":"RadiiPolynomial.Derivative","text":"Derivative{T<:Union{Int,Tuple{Vararg{Int}}}} <: SpecialOperator\n\nGeneric derivative operator.\n\nField:\n\norder :: T\n\nConstructors:\n\nDerivative(::Int)\nDerivative(::Tuple{Vararg{Int}})\nDerivative(order::Int...): equivalent to Derivative(order)\n\nSee also: differentiate, differentiate!, project(::Derivative, ::VectorSpace, ::VectorSpace) and project!(::LinearOperator, ::Derivative).\n\nExamples\n\njulia> Derivative(1)\nDerivative{Int64}(1)\n\njulia> Derivative(1, 2)\nDerivative{Tuple{Int64, Int64}}((1, 2))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.differentiate","page":"Special operators","title":"RadiiPolynomial.differentiate","text":"differentiate(a::Sequence, α=1)\n\nCompute the α-th derivative of a.\n\nSee also: differentiate!, Derivative, *(::Derivative, ::Sequence) and (::Derivative)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.differentiate!","page":"Special operators","title":"RadiiPolynomial.differentiate!","text":"differentiate!(c::Sequence, a::Sequence, α=1)\n\nCompute the α-th derivative of a. The result is stored in c by overwriting it.\n\nSee also: differentiate, Derivative, *(::Derivative, ::Sequence) and (::Derivative)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Integral","page":"Special operators","title":"RadiiPolynomial.Integral","text":"Integral{T<:Union{Int,Tuple{Vararg{Int}}}} <: SpecialOperator\n\nGeneric integral operator.\n\nField:\n\norder :: T\n\nConstructors:\n\nIntegral(::Int)\nIntegral(::Tuple{Vararg{Int}})\nIntegral(order::Int...): equivalent to Integral(order)\n\nSee also: integrate, integrate!, project(::Integral, ::VectorSpace, ::VectorSpace) and project!(::LinearOperator, ::Integral).\n\nExamples\n\njulia> Integral(1)\nIntegral{Int64}(1)\n\njulia> Integral(1, 2)\nIntegral{Tuple{Int64, Int64}}((1, 2))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.integrate","page":"Special operators","title":"RadiiPolynomial.integrate","text":"integrate(a::Sequence, α=1)\n\nCompute the α-th integral of a.\n\nSee also: integrate!, Integral, *(::Integral, ::Sequence) and (::Integral)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.integrate!","page":"Special operators","title":"RadiiPolynomial.integrate!","text":"integrate!(c::Sequence, a::Sequence, α=1)\n\nCompute the α-th integral of a. The result is stored in c by overwriting it.\n\nSee also: integrate, Integral, *(::Integral, ::Sequence) and (::Integral)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Evaluation","page":"Special operators","title":"RadiiPolynomial.Evaluation","text":"Evaluation{T<:Union{Nothing,Number,Tuple{Vararg{Union{Nothing,Number}}}}} <: SpecialOperator\n\nGeneric evaluation operator. A value of nothing indicates that no evaluation should be performed.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nEvaluation(::Union{Nothing,Number})\nEvaluation(::Tuple{Vararg{Union{Nothing,Number}}})\nEvaluation(value::Union{Number,Nothing}...): equivalent to Evaluation(value)\n\nSee also: evaluate, evaluate!, project(::Evaluation, ::VectorSpace, ::VectorSpace) and project!(::LinearOperator, ::Evaluation).\n\nExamples\n\njulia> Evaluation(1.0)\nEvaluation{Float64}(1.0)\n\njulia> Evaluation(1.0, nothing, 2.0)\nEvaluation{Tuple{Float64, Nothing, Float64}}((1.0, nothing, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.evaluate","page":"Special operators","title":"RadiiPolynomial.evaluate","text":"evaluate(a::Sequence, x)\n\nEvaluate a at x.\n\nSee also: (::Sequence)(::Any, ::Vararg), evaluate!, Evaluation, *(::Evaluation, ::Sequence) and (::Evaluation)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.evaluate!","page":"Special operators","title":"RadiiPolynomial.evaluate!","text":"evaluate!(c::Union{AbstractVector,Sequence}, a::Sequence, x)\n\nEvaluate a at x. The result is stored in c by overwriting it.\n\nSee also: (::Sequence)(::Any, ::Vararg), evaluate, Evaluation, *(::Evaluation, ::Sequence) and (::Evaluation)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Scale","page":"Special operators","title":"RadiiPolynomial.Scale","text":"Scale{T<:Union{Number,Tuple{Vararg{Number}}}} <: SpecialOperator\n\nGeneric scale operator.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nScale(::Number)\nScale(::Tuple{Vararg{Number}})\nScale(value::Number...): equivalent to Scale(value)\n\nSee also: scale, scale!, project(::Scale, ::VectorSpace, ::VectorSpace) and project!(::LinearOperator, ::Scale).\n\nExamples\n\njulia> Scale(1.0)\nScale{Float64}(1.0)\n\njulia> Scale(1.0, 2.0)\nScale{Tuple{Float64, Float64}}((1.0, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.scale","page":"Special operators","title":"RadiiPolynomial.scale","text":"scale(a::Sequence, γ)\n\nScale a by a factor γ.\n\nSee also: scale!, Scale, *(::Scale, ::Sequence) and (::Scale)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.scale!","page":"Special operators","title":"RadiiPolynomial.scale!","text":"scale!(c::Sequence, a::Sequence, γ)\n\nScale a by a factor γ. The result is stored in c by overwriting it.\n\nSee also: scale, Scale, *(::Scale, ::Sequence) and (::Scale)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.Shift","page":"Special operators","title":"RadiiPolynomial.Shift","text":"Shift{T<:Union{Number,Tuple{Vararg{Number}}}} <: SpecialOperator\n\nGeneric shift operator.\n\nField:\n\nvalue :: T\n\nConstructors:\n\nShift(::Number)\nShift(::Tuple{Vararg{Number}})\nShift(value::Number...): equivalent to Shift(value)\n\nSee also: shift, shift!, project(::Shift, ::VectorSpace, ::VectorSpace) and project!(::LinearOperator, ::Shift).\n\nExamples\n\njulia> Shift(1.0)\nShift{Float64}(1.0)\n\njulia> Shift(1.0, 2.0)\nShift{Tuple{Float64, Float64}}((1.0, 2.0))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.shift","page":"Special operators","title":"RadiiPolynomial.shift","text":"shift(a::Sequence, τ)\n\nShift a by τ.\n\nSee also: shift!, Shift, *(::Shift, ::Sequence) and (::Shift)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/special_operators/#RadiiPolynomial.shift!","page":"Special operators","title":"RadiiPolynomial.shift!","text":"shift!(c::Sequence, a::Sequence, τ)\n\nShift a by τ. The result is stored in c by overwriting it.\n\nSee also: shift, Shift, *(::Shift, ::Sequence) and (::Shift)(::Sequence).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/vector_spaces/#vector_spaces","page":"Vector spaces","title":"Vector spaces","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"RadiiPolynomial defines a variety of vector spaces to represent the Banach space on which one applies the Radii Polynomial Theorem.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"All spaces mentioned below are a subtype of the abstract type VectorSpace.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"VectorSpace\n├─ CartesianSpace\n│  ├─ CartesianPower\n│  └─ CartesianProduct\n├─ ParameterSpace\n└─ SequenceSpace\n   ├─ BaseSpace\n   │  ├─ Chebyshev\n   │  ├─ Fourier\n   │  └─ Taylor\n   └─ TensorSpace","category":"page"},{"location":"sequence_spaces/vector_spaces/#Parameter-space","page":"Vector spaces","title":"Parameter space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A ParameterSpace represents the commutative field of a parameter. This is the standard space to use for an unfolding parameter.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒫 = ParameterSpace()\ndimension(𝒫)\nindices(𝒫)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Sequence-space","page":"Vector spaces","title":"Sequence space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"SequenceSpace is the abstract type for all sequence spaces.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"SequenceSpace\n├─ BaseSpace\n│  ├─ Chebyshev\n│  ├─ Fourier\n│  └─ Taylor\n└─ TensorSpace","category":"page"},{"location":"sequence_spaces/vector_spaces/#BaseSpace","page":"Vector spaces","title":"BaseSpace","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"BaseSpace is the abstract type for all sequence spaces that are not a TensorSpace but can be interlaced to form one.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"BaseSpace\n├─ Chebyshev\n├─ Fourier\n└─ Taylor","category":"page"},{"location":"sequence_spaces/vector_spaces/#Taylor","page":"Vector spaces","title":"Taylor","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n, a Taylor sequence space is the span of phi_0 dots phi_n where phi_k(t) bydef t^k for k = 0 dots n and t in -nu nu for some appropriate nu  0.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯 = Taylor(1)\norder(𝒯)\ndimension(𝒯)\nindices(𝒯)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Fourier","page":"Vector spaces","title":"Fourier","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n and frequency omega, a Fourier sequence space is the span of phi_-n dots phi_n where phi_k(t) bydef e^i omega k t for k = -n dots n and t in mathbbR2piomega^-1mathbbZ.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"ℱ = Fourier(1, 1.0)\norder(ℱ)\nfrequency(ℱ)\ndimension(ℱ)\nindices(ℱ)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Chebyshev","page":"Vector spaces","title":"Chebyshev","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"For a given order n, a Chebyshev sequence space is the span of phi_0 phi_1 dots phi_n where phi_0(t) bydef 1, phi_1(t) bydef t and phi_k(t) bydef 2 t phi_k-1(t) - phi_k-2(t) for k = 2 dots n and t in -1 1.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"It is important to note that the coefficients a_0 a_1 dots a_n associated with a Chebyshev space are normalized such that a_0 2a_1 dots 2a_n are the actual Chebyshev coefficients.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒞 = Chebyshev(1)\norder(𝒞)\ndimension(𝒞)\nindices(𝒞)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Tensor-space","page":"Vector spaces","title":"Tensor space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A TensorSpace is the tensor product of some BaseSpace. The standard constructor for TensorSpace is the ⊗ (\\otimes<tab>) operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯_otimes_ℱ_otimes_𝒞 = Taylor(1) ⊗ Fourier(1, 1.0) ⊗ Chebyshev(1) # TensorSpace((Taylor(1), Fourier(1, 1.0), Chebyshev(1)))\nnspaces(𝒯_otimes_ℱ_otimes_𝒞)\norder(𝒯_otimes_ℱ_otimes_𝒞)\nfrequency(𝒯_otimes_ℱ_otimes_𝒞, 2)\ndimension(𝒯_otimes_ℱ_otimes_𝒞)\ndimensions(𝒯_otimes_ℱ_otimes_𝒞)\nindices(𝒯_otimes_ℱ_otimes_𝒞)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-space","page":"Vector spaces","title":"Cartesian space","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"CartesianSpace is the abstract type for all cartesian spaces.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"CartesianSpace\n├─ CartesianPower\n└─ CartesianProduct","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-power","page":"Vector spaces","title":"Cartesian power","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A CartesianPower is the cartesian product of an identical VectorSpace. The standard constructor for CartesianPower is the ^ operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒯² = Taylor(1) ^ 2 # CartesianPower(Taylor(1), 2)\nnspaces(𝒯²)\ndimension(𝒯²)\nindices(𝒯²)","category":"page"},{"location":"sequence_spaces/vector_spaces/#Cartesian-product","page":"Vector spaces","title":"Cartesian product","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"A CartesianProduct is the cartesian product of some VectorSpace. The standard constructor for CartesianProduct is the × (\\times<tab>) operator.","category":"page"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"𝒫_times_𝒯 = ParameterSpace() × Taylor(1) # CartesianProduct((ParameterSpace(), Taylor(1)))\nnspaces(𝒫_times_𝒯)\ndimension(𝒫_times_𝒯)\nindices(𝒫_times_𝒯)","category":"page"},{"location":"sequence_spaces/vector_spaces/#API","page":"Vector spaces","title":"API","text":"","category":"section"},{"location":"sequence_spaces/vector_spaces/","page":"Vector spaces","title":"Vector spaces","text":"VectorSpace\nParameterSpace\nSequenceSpace\nBaseSpace\nTaylor\nFourier\nChebyshev\nTensorSpace\nTensorIndices\n⊗\nCartesianSpace\nCartesianPower\nRadiiPolynomial.:^\nCartesianProduct\nRadiiPolynomial.:×","category":"page"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.VectorSpace","page":"Vector spaces","title":"RadiiPolynomial.VectorSpace","text":"VectorSpace\n\nAbstract type for all vector spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.ParameterSpace","page":"Vector spaces","title":"RadiiPolynomial.ParameterSpace","text":"ParameterSpace <: VectorSpace\n\nParameter space corresponding to a commutative field.\n\nExample\n\njulia> ParameterSpace()\n𝕂\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.SequenceSpace","page":"Vector spaces","title":"RadiiPolynomial.SequenceSpace","text":"SequenceSpace <: VectorSpace\n\nAbstract type for all sequence spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.BaseSpace","page":"Vector spaces","title":"RadiiPolynomial.BaseSpace","text":"BaseSpace <: SequenceSpace\n\nAbstract type for all sequence spaces that are not a TensorSpace but can be interlaced to form one.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Taylor","page":"Vector spaces","title":"RadiiPolynomial.Taylor","text":"Taylor <: BaseSpace\n\nTaylor sequence space whose elements are Taylor sequences of a prescribed order.\n\nField:\n\norder :: Int\n\nConstructor:\n\nTaylor(::Int)\n\nSee also: Fourier and Chebyshev.\n\nExamples\n\njulia> s = Taylor(2)\nTaylor(2)\n\njulia> order(s)\n2\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Fourier","page":"Vector spaces","title":"RadiiPolynomial.Fourier","text":"Fourier{T<:Real} <: BaseSpace\n\nFourier sequence space whose elements are Fourier sequences of a prescribed order and frequency.\n\nFields:\n\norder :: Int\nfrequency :: T\n\nConstructor:\n\nFourier(::Int, ::Real)\n\nSee also: Taylor and Chebyshev.\n\nExamples\n\njulia> s = Fourier(2, 1.0)\nFourier(2, 1.0)\n\njulia> order(s)\n2\n\njulia> frequency(s)\n1.0\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.Chebyshev","page":"Vector spaces","title":"RadiiPolynomial.Chebyshev","text":"Chebyshev <: BaseSpace\n\nChebyshev sequence space whose elements are Chebyshev sequences of a prescribed order.\n\nField:\n\norder :: Int\n\nConstructor:\n\nChebyshev(::Int)\n\nSee also: Taylor and Fourier.\n\nExamples\n\njulia> s = Chebyshev(2)\nChebyshev(2)\n\njulia> order(s)\n2\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.TensorSpace","page":"Vector spaces","title":"RadiiPolynomial.TensorSpace","text":"TensorSpace{T<:Tuple{Vararg{BaseSpace}}} <: SequenceSpace\n\nTensor space resulting from the tensor product of some BaseSpace.\n\nField:\n\nspaces :: T\n\nConstructors:\n\nTensorSpace(::Tuple{Vararg{BaseSpace}})\nTensorSpace(spaces::BaseSpace...): equivalent to TensorSpace(spaces)\n⊗(s₁::BaseSpace, s₂::BaseSpace): equivalent to TensorSpace((s₁, s₂))\n⊗(s₁::TensorSpace, s₂::TensorSpace): equivalent to TensorSpace((s₁.spaces..., s₂.spaces...))\n⊗(s₁::TensorSpace, s₂::BaseSpace): equivalent to TensorSpace((s₁.spaces..., s₂))\n⊗(s₁::BaseSpace, s₂::TensorSpace): equivalent to TensorSpace((s₁, s₂.spaces...))\n\nSee also: ⊗.\n\nExamples\n\njulia> s = TensorSpace(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\nTaylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\n\njulia> spaces(s)\n(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.TensorIndices","page":"Vector spaces","title":"RadiiPolynomial.TensorIndices","text":"TensorIndices{<:Tuple}\n\nMultidimentional rectangular range of indices for some TensorSpace.\n\nExamples\n\njulia> TensorIndices((0:2, -1:1))\nTensorIndices{Tuple{UnitRange{Int64}, UnitRange{Int64}}}((0:2, -1:1))\n\njulia> indices(Taylor(2) ⊗ Fourier(1, 1.0))\nTensorIndices{Tuple{UnitRange{Int64}, UnitRange{Int64}}}((0:2, -1:1))\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.:⊗","page":"Vector spaces","title":"RadiiPolynomial.:⊗","text":"⊗(s₁::BaseSpace, s₂::BaseSpace)\n⊗(s₁::TensorSpace, s₂::TensorSpace)\n⊗(s₁::TensorSpace, s₂::BaseSpace)\n⊗(s₁::BaseSpace, s₂::TensorSpace)\n\nCreate a TensorSpace from the tensor product of some SequenceSpace.\n\nSee also: TensorSpace.\n\nExamples\n\njulia> Taylor(1) ⊗ Fourier(2, 1.0)\nTaylor(1) ⊗ Fourier(2, 1.0)\n\njulia> Taylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\nTaylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\n\njulia> Taylor(1) ⊗ (Fourier(2, 1.0) ⊗ Chebyshev(3))\nTaylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\n\njulia> (Taylor(1) ⊗ Fourier(2, 1.0)) ⊗ Chebyshev(3)\nTaylor(1) ⊗ Fourier(2, 1.0) ⊗ Chebyshev(3)\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianSpace","page":"Vector spaces","title":"RadiiPolynomial.CartesianSpace","text":"CartesianSpace <: VectorSpace\n\nAbstract type for all cartesian spaces.\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianPower","page":"Vector spaces","title":"RadiiPolynomial.CartesianPower","text":"CartesianPower{T<:VectorSpace} <: CartesianSpace\n\nCartesian space resulting from the cartesian product of the same VectorSpace.\n\nFields:\n\nspace :: T\nn :: Int\n\nConstructors:\n\nCartesianPower(::VectorSpace, ::Int)\n^(::VectorSpace, ::Int): equivalent to CartesianPower(::VectorSpace, ::Int)\n\nSee also: ^(::VectorSpace, ::Int), CartesianProduct and ×.\n\nExamples\n\njulia> s = CartesianPower(Taylor(1), 3)\nTaylor(1)³\n\njulia> space(s)\nTaylor(1)\n\njulia> nspaces(s)\n3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#Base.:^","page":"Vector spaces","title":"Base.:^","text":"^(s::VectorSpace, n::Int)\n\nCreate a CartesianPower from n cartesian product(s) of s.\n\nSee also: CartesianPower, CartesianProduct, ×.\n\nExamples\n\njulia> Taylor(1)^3\nTaylor(1)³\n\njulia> (Taylor(1)^3)^2\n(Taylor(1)³)²\n\n\n\n\n\n^(a::Sequence{<:SequenceSpace}, n::Int)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/vector_spaces/#RadiiPolynomial.CartesianProduct","page":"Vector spaces","title":"RadiiPolynomial.CartesianProduct","text":"CartesianProduct{T<:Tuple{Vararg{VectorSpace}}} <: CartesianSpace\n\nCartesian space resulting from the cartesian product of some VectorSpace.\n\nField:\n\nspaces :: T\n\nConstructors:\n\nCartesianProduct(::Tuple{Vararg{VectorSpace}})\nCartesianProduct(spaces::VectorSpace...): equivalent to CartesianProduct(spaces)\n×(s₁::VectorSpace, s₂::VectorSpace): equivalent to CartesianProduct((s₁, s₂))\n×(s₁::CartesianProduct, s₂::CartesianProduct): equivalent to CartesianProduct((s₁.spaces..., s₂.spaces...))\n×(s₁::CartesianProduct, s₂::VectorSpace): equivalent to CartesianProduct((s₁.spaces..., s₂))\n×(s₁::VectorSpace, s₂::CartesianProduct): equivalent to CartesianProduct((s₁, s₂.spaces...))\n\nSee also: ×, CartesianPower, ^(::VectorSpace, ::Int).\n\nExamples\n\njulia> s = CartesianProduct(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\nTaylor(1) × Fourier(2, 1.0) × Chebyshev(3)\n\njulia> spaces(s)\n(Taylor(1), Fourier(2, 1.0), Chebyshev(3))\n\njulia> nspaces(s)\n3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/vector_spaces/#LinearAlgebra.:×","page":"Vector spaces","title":"LinearAlgebra.:×","text":"×(::VectorSpace, ::VectorSpace)\n×(::CartesianProduct, ::CartesianProduct)\n×(::CartesianProduct, ::VectorSpace)\n×(::VectorSpace, ::CartesianProduct)\n\nCreate a CartesianProduct from the cartesian product of some VectorSpace.\n\nSee also: CartesianProduct, CartesianPower and ^(::VectorSpace, ::Int).\n\nExamples\n\njulia> Taylor(1) × Fourier(2, 1.0)\nTaylor(1) × Fourier(2, 1.0)\n\njulia> Taylor(1) × Fourier(2, 1.0) × Chebyshev(3)\nTaylor(1) × Fourier(2, 1.0) × Chebyshev(3)\n\njulia> (Taylor(1) × Fourier(2, 1.0)) × Chebyshev(3)\nTaylor(1) × Fourier(2, 1.0) × Chebyshev(3)\n\njulia> Taylor(1) × (Fourier(2, 1.0) × Chebyshev(3))\nTaylor(1) × Fourier(2, 1.0) × Chebyshev(3)\n\njulia> ParameterSpace()^2 × ((Taylor(1) ⊗ Fourier(2, 1.0)) × Chebyshev(3))^3\n𝕂² × ((Taylor(1) ⊗ Fourier(2, 1.0)) × Chebyshev(3))³\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"<!--\nJulia colors:\n#1f83ff (blue)\n#CA3C32 (red)\n#399746 (green)\n#9259A3 (purple)\n-->\n\n<h1 style=\"text-align: center; font-size: 2.5em; color: #1f83ff\">RadiiPolynomial.jl</h1>\n\n<div class=\"row\">\n  <div class=\"column\">\n    <h3 style=\"text-align: center; color: #CA3C32;\">Installation</h3>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # Julia v1.9 or above\nredirect_stderr(devnull) do # hide\nPkg.add(\"RadiiPolynomial\")\nend # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"  </div>\n  <div class=\"column\">\n    <h3 style=\"text-align: center; color: #399746;\">Open source</h3>\n    <p>The RadiiPolynomial library is an open source software under the <a href=\"https://github.com/OlivierHnt/RadiiPolynomial.jl/blob/main/LICENSE.md\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">MIT license</a></p>\n    <p style=\"text-align: center;\"><a href=\"https://github.com/OlivierHnt/RadiiPolynomial.jl\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">github.com/OlivierHnt/RadiiPolynomial.jl</a></p>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"single\">\n    <h3 style=\"text-align: center; color: #9259A3;\">Citation</h3>\n    <p>If you use the RadiiPolynomial library in your publication, research, teaching, or other activities, please use the BibTeX template <a href=\"https://github.com/OlivierHnt/RadiiPolynomial.jl/blob/main/CITATION.bib\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">CITATION.bib</a></p>\n    <p style=\"text-align: center;\"><a href=\"https://doi.org/10.5281/zenodo.5705258\" rel=\"nofollow noopener noreferrer\" target=\"_blank\">10.5281/zenodo.5705258</a></p>\n  </div>\n</div>","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/#Pseudo-arclength-continuation-of-equilibria-of-the-FitzHugh-Nagumo-model","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"","category":"section"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"In this example, we will prove the existence of a branch of equilibria of the FitzHugh-Nagumo model","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"begincases\ndisplaystyle fracddt u(t) = f(u(t) gamma) bydef beginpmatrix u_1(t)(u_1(t) - a)(1 - u_1(t)) - u_2(t)  varepsilon(u_1(t) - gamma u_2(t)) endpmatrix\nu(0) = u_0 in mathbbR^2\nendcases","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"where a = 5 and varepsilon = 1.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The vector-field f and its Jacobian, denoted Df, may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"function f(u, γ)\n    a, ϵ = 5, 1\n    u₁, u₂ = u\n    return [u₁*(u₁ - a)*(1 - u₁) - u₂, ϵ*(u₁ - γ*u₂)]\nend\n\nfunction Dᵤf(u, γ)\n    a, ϵ = 5, 1\n    u₁, u₂ = u\n    return [a*(2u₁-1)+(2-3u₁)*u₁ -1\n            ϵ                    -ϵ*γ]\nend\n\nfunction ∂γf(u, γ)\n    a, ϵ = 5, 1\n    u₁, u₂ = u\n    return [0, -ϵ*u₂]\nend\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"We use the pseudo-arclength continuation and retrieve a numerical approximation of the curve. By a contraction argument, we then prove that there exists a surrounding region that contains the desired curve.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"In a nutshell, the pseudo-arclength continuation consists in computing a sequence of numerical zeros of f. Starting with an initial approximate zero x_textinit in mathbbR^3, we retrieve an approximate tangent vector v to the curve at x_textinit by looking at ker Df(x_textinit). Then, our predictor for the next zero is set to w bydef x_textinit + delta v where delta  0 represents the step size. The Newton's method is applied on the mapping F_textNewton  mathbbR^3 to mathbbR^3 given by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"F_textNewton(x) bydef\nbeginpmatrix\n(x - w) cdot v\nf(x)\nendpmatrix","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The mapping F_textNewton and its Jacobian may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"import LinearAlgebra: ⋅\n\nF(x, v, w) = [f(x[1:2], x[3]) ; (x - w) ⋅ v]\n\nDF(x, v) = [Dᵤf(x[1:2], x[3]) ∂γf(x[1:2], x[3]) ; transpose(v)]\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Next, we perform Newton's method:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"using RadiiPolynomial\nimport LinearAlgebra: nullspace\n\n# initial point on the branch of equilibria\n\nγ_init = 2.0\n\nu_init = [1.1, 0.5]\nu_init, success = newton(u -> (f(u, γ_init), Dᵤf(u, γ_init)), u_init)\n\n# next point on the branch of equilibria\n\nx_init = [u_init ; γ_init]\n\nv = vec(nullspace([Dᵤf(x_init[1:2], x_init[3]) ∂γf(x_init[1:2], x_init[3])])) # initial tangent vector\n\nδ = 5e-2 # step size\n\nw = x_init + δ * v # predictor\n\nx_final, success = newton(x -> (F(x, v, w), DF(x, v)), w)\nnothing # hide","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Whenever Newton's method is successful, we proceed to the next iteration of the pseudo-arclength continuation by repeating the above strategy. Performing this sufficiently many times, we can construct an order N polynomial approximation of the curve of zeros:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"barx(s) bydef barx_0 + 2 sum_n = 1^N barx_n phi_n (s) qquad textfor all  s in -11","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"where phi_n are the Chebyshev polynomials of the first kind.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Define the mapping F  mathbbR^3 times -11 to mathbbR^3 by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"F(x s) bydef\nbeginpmatrix\nf(x) \n(x - barx(s)) cdot barv(s)\nendpmatrix","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"and the fixed-point operator T  mathbbR^3 times -11 to mathbbR^3 by","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"T(x s) bydef x - A(s) F(x s)","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"where A(s)  mathbbR^3 to mathbbR^3 is the injective operator corresponding to a numerical approximation of D_x F(barx(s) s)^-1 for all s in -1 1.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"Let R  0. We use a uniform version of the second-order Radii Polynomial Theorem (cf. Section Radii polynomial approach) such that we need to estimate T(barx(s) s) - barx(s)_1, D_x T(barx(s) s)_1 and sup_x in textcl( B_R(barx(s)) ) D_x^2 T(x s)_1 for all s in -11. In particular, we have","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"T(barx(s) s) - barx(s)_1 = leftA beginpmatrix f(barx(s))  0 endpmatrix right_1 qquad textfor all  s in -11","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The computer-assisted proof may be implemented as follows:","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"N = 500\nN_fft = nextpow(2, 2N + 1)\nnpts = N_fft ÷ 2 + 1\n\narclength = 15.0\narclength_grid = [0.5 * arclength - 0.5 * cospi(2j/N_fft) * arclength for j ∈ 0:npts-1]\nx_grid = Vector{Vector{Float64}}(undef, npts)\nv_grid = Vector{Vector{Float64}}(undef, npts)\n\n# initialize\n\ndirection = [0, 0, -1] # starts by decreasing the parameter\nx_grid[1] = x_init\nv_grid[1] = vec(nullspace([Dᵤf(x_grid[1][1:2], x_grid[1][3]) ∂γf(x_grid[1][1:2], x_grid[1][3])]))\nif direction ⋅ v_grid[1] < 0 # enforce direction\n    v_grid[1] .*= -1\nend\n\n# run continuation scheme\n\nfor i ∈ 2:npts\n    δᵢ = arclength_grid[i] - arclength_grid[i-1]\n\n    wᵢ = x_grid[i-1] .+ δᵢ .* v_grid[i-1]\n\n    x, success = newton(x -> (F(x, v_grid[i-1], wᵢ), DF(x, v_grid[i-1])), wᵢ; verbose = true)\n    success || error()\n\n    x_grid[i] = x\n    v_grid[i] = vec(nullspace([Dᵤf(x_grid[i][1:2], x_grid[i][3]) ∂γf(x_grid[i][1:2], x_grid[i][3])]))\n    if v_grid[i-1] ⋅ v_grid[i] < 0 # keep the same direction\n        v_grid[i] .*= -1\n    end\nend\n\n# construct the approximations\n\nfunction cheb2grid(x::VecOrMat{<:Sequence}, N_fft)\n    vals = fft.(x, N_fft)\n    return [real.(getindex.(vals, i)) for i ∈ eachindex(vals[1])]\nend\n\ngrid2cheb(x_fft::Vector{<:Vector}, N) =\n    [rifft!(complex.(getindex.(x_fft, i)), Chebyshev(N)) for i ∈ eachindex(x_fft[1])]\n\ngrid2cheb(x_fft::Vector{<:Matrix}, N) =\n    [rifft!(complex.(getindex.(x_fft, i, j)), Chebyshev(N)) for i ∈ axes(x_fft[1], 1), j ∈ axes(x_fft[1], 2)]\n\nx_fft = [reverse(x_grid) ; x_grid[begin+1:end-1]]\nx̄ = map(x -> interval.(x), grid2cheb(x_fft, N))\n\nv_fft = [reverse(v_grid) ; v_grid[begin+1:end-1]]\nv̄ = map(v -> interval.(v), grid2cheb(v_fft, N))\n\nA = map(A -> interval.(A), grid2cheb(inv.(DF.(x_fft, v_fft)), N))\n\n# AF is a polynomial with respect to s of order 3N\n\nN3 = 3N\nN3_fft = nextpow(2, 2N3 + 1)\n\nAF_fft = cheb2grid(A, N3_fft) .* F.(cheb2grid(x̄, N3_fft), cheb2grid(v̄, N3_fft), cheb2grid(x̄, N3_fft))\nAF = grid2cheb(AF_fft, N3)\n\nY = norm(norm.(AF, 1), 1)\n\n# ADF is a polynomial with respect to s of order 2N\n\nN2 = 2N\nN2_fft = nextpow(2, 2N2 + 1)\n\nI_ADF_fft = Ref(I) .- cheb2grid(A, N2_fft) .* DF.(cheb2grid(x̄, N2_fft), cheb2grid(v̄, N2_fft))\nI_ADF = grid2cheb(I_ADF_fft, N2)\n\nZ₁ = opnorm(norm.(I_ADF, 1), 1)\n\n#\n\nR = 2sup(Y)\n\na, ϵ = 5, 1\nZ₂ = opnorm(norm.(A, 1), 1) * max(abs(2a + 2) + 6(norm(x̄[1], 1) + R) + abs(ϵ), abs(ϵ))\n\n#\n\nsetdisplay(:full)\n\ninterval_of_existence(Y, Z₁, Z₂, R)","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"The following figure[1] shows the numerical approximation of the proven branch of equilibria of the FitzHugh-Nagumo model.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"[1]: S. Danisch and J. Krumbiegel, Makie.jl: Flexible high-performance data visualization for Julia, Journal of Open Source Software, 6 (2021), 3349.","category":"page"},{"location":"examples/finite_dimensional_proofs/fhn_pseudo_arclength/","page":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","title":"Pseudo-arclength continuation of equilibria of the FitzHugh-Nagumo model","text":"<video width=\"800\" height=\"400\" controls autoplay>\n  <source src=\"../fhn_pseudo_arclength.svg\" type=\"video/mp4\">\n</video>","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"using RadiiPolynomial","category":"page"},{"location":"sequence_spaces/sequences/#Sequences","page":"Sequences","title":"Sequences","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"A Sequence is a structure representing a sequence in a prescribed VectorSpace. More precisely, a Sequence is comprised of the two fields space::VectorSpace and coefficients::AbstractVector with matching dimension and length.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"a = Sequence(Taylor(1), [1, 2])","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The two fields space and coefficients are accessible via the respective functions of the same name.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"space(a)\ncoefficients(a)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"For convenience, the methods zeros, ones, fill and fill! are available:","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"s = Taylor(1)\nzeros(s)\nones(s)\nfill(2, s)\nfill!(zeros(s), 2)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The coefficients of a Sequence are indexed according to the indices of the space (as given by indices).","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"a[0:1] # indices(space(a))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"When the space of a Sequence is a CartesianSpace, its coefficients are given as the concatenation of the coefficients associated with each space. The function component extracts a Sequence composing the cartesian space.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"b = Sequence(ParameterSpace() × Taylor(1)^2, [1, 2, 3, 4, 5])\nb[1:5] # indices(space(b))\ncomponent(b, 1) # extract the sequence associated with the space ParameterSpace()\ncomponent(b, 2) # extract the sequence associated with the space Taylor(1)^2\ncomponent(component(b, 2), 1)\ncomponent(component(b, 2), 2)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"Similarly, the function eachcomponent returns a Generator whose iterates yield each Sequence composing the cartesian space.","category":"page"},{"location":"sequence_spaces/sequences/#Arithmetic","page":"Sequences","title":"Arithmetic","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The addition and subtraction operations are implemented as the + and - functions respectively. Their bar counterparts add_bar (unicode alias +\\bar<tab>) and sub_bar (unicode alias -\\bar<tab>) give the result projected in the smallest compatible space between the operands.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"c = Sequence(Taylor(1), [0, 1])\nd = Sequence(Taylor(2), [1, 2, 1])\nc + d\nc - d\nadd_bar(c, d) # project(c + d, Taylor(1))\nsub_bar(c, d) # project(c - d, Taylor(1))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The discrete convolution between sequences whose spaces are a SequenceSpace is implemented as the *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int) functions. Their bar counterparts mul_bar (unicode alias *\\bar<tab>) and pow_bar (unicode alias ^\\bar<tab>) give the result projected in the smallest compatible space between the operands; in general, mul_bar is not associative.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"c * d\nc ^ 3\nmul_bar(c, d) # project(c * d, Taylor(1))\npow_bar(c, 3) # project(c ^ 3, Taylor(1))","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"To improve performance, the FFT algorithm may be used to compute discrete convolutions via the Convolution Theorem. However, the performance gain is tempered with the loss of accuracy which may stop the decay of the coefficients.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"x = Sequence(Taylor(3), interval.([inv(10_000.0 ^ i) for i ∈ 0:3]))\nx³ = x ^ 3\nx³_fft = rifft!(zero(x³), fft(x, fft_size(space(x), 3)) .^ 3)","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"To circumvent machine precision limitations, the banach_rounding! method enclose rigorously each term of the convolution beyond a prescribed order.[1]","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"[1]: J.-P. Lessard, Computing discrete convolutions with verified accuracy via Banach algebras and the FFT, Applications of Mathematics, 63 (2018), 219-235.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"The rounding strategy for *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), mul_bar and pow_bar is integrated in the functions banach_rounding_mul, banach_rounding_mul!, banach_rounding_pow, banach_rounding_mul_bar and banach_rounding_pow_bar respectively.","category":"page"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"X = ℓ¹(GeometricWeight(interval(10_000.0)))\nbanach_rounding!(x³_fft, norm(x, X) ^ 3, X, 5)","category":"page"},{"location":"sequence_spaces/sequences/#API","page":"Sequences","title":"API","text":"","category":"section"},{"location":"sequence_spaces/sequences/","page":"Sequences","title":"Sequences","text":"Sequence\n*(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace})\nmul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number)\nbanach_rounding_mul\nbanach_rounding_mul!\n^(::Sequence{<:SequenceSpace}, ::Int)\nbanach_rounding_pow","category":"page"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.Sequence","page":"Sequences","title":"RadiiPolynomial.Sequence","text":"Sequence{T<:VectorSpace,S<:AbstractVector}\n\nCompactly supported sequence in the given space.\n\nFields:\n\nspace :: T\ncoefficients :: S\n\nConstructors:\n\nSequence(::VectorSpace, ::AbstractVector)\nSequence(coefficients::AbstractVector): equivalent to Sequence(ParameterSpace()^length(coefficients), coefficients)\n\nExamples\n\njulia> Sequence(Taylor(2), [1, 2, 1]) # 1 + 2x + x^2\nSequence in Taylor(2) with coefficients Vector{Int64}:\n 1\n 2\n 1\n\njulia> Sequence(Taylor(1) ⊗ Fourier(1, 1.0), [0.5, 0.5, 0.0, 0.0, 0.5, 0.5]) # (1 + x) cos(y)\nSequence in Taylor(1) ⊗ Fourier(1, 1.0) with coefficients Vector{Float64}:\n 0.5\n 0.5\n 0.0\n 0.0\n 0.5\n 0.5\n\njulia> Sequence([1, 2, 3])\nSequence in 𝕂³ with coefficients Vector{Int64}:\n 1\n 2\n 3\n\n\n\n\n\n","category":"type"},{"location":"sequence_spaces/sequences/#Base.:*-Tuple{Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}}","page":"Sequences","title":"Base.:*","text":"*(a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace})\n\nCompute the discrete convolution (associated with space(a) and space(b)) of a and b.\n\nSee also: mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), ^(::Sequence{<:SequenceSpace}, ::Int), banach_rounding_mul and banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#LinearAlgebra.mul!-Tuple{Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}, Sequence{<:SequenceSpace}, Number, Number}","page":"Sequences","title":"LinearAlgebra.mul!","text":"mul!(c::Sequence{<:SequenceSpace}, a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, α::Number, β::Number)\n\nCompute project(a * b, space(c)) * α + c * β in-place. The result is stored in c by overwriting it.\n\nNote: c must not be aliased with either a or b.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), ^(::Sequence{<:SequenceSpace}, ::Int), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_mul","page":"Sequences","title":"RadiiPolynomial.banach_rounding_mul","text":"banach_rounding_mul(a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, X::Ell1)\n\nCompute the discrete convolution (associated with space(a) and space(b)) of a and b. A cut-off order is estimated such that the coefficients of the output beyond this order are rigorously enclosed.\n\nSee also: banach_rounding_mul!, banach_rounding_pow, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_mul!","page":"Sequences","title":"RadiiPolynomial.banach_rounding_mul!","text":"banach_rounding_mul!(c::Sequence{<:SequenceSpace}, a::Sequence{<:SequenceSpace}, b::Sequence{<:SequenceSpace}, X::Ell1)\n\nCompute project(banach_rounding_mul(a, b, X), space(c)) in-place. The result is stored in c by overwriting it.\n\nNote: c must not be aliased with either a or b.\n\nSee also: banach_rounding_mul, banach_rounding_pow, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"},{"location":"sequence_spaces/sequences/#Base.:^-Tuple{Sequence{<:SequenceSpace}, Int64}","page":"Sequences","title":"Base.:^","text":"^(a::Sequence{<:SequenceSpace}, n::Int)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times.\n\nSee also: *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number), banach_rounding_mul, banach_rounding_mul! and banach_rounding_pow.\n\n\n\n\n\n","category":"method"},{"location":"sequence_spaces/sequences/#RadiiPolynomial.banach_rounding_pow","page":"Sequences","title":"RadiiPolynomial.banach_rounding_pow","text":"banach_rounding_pow(a::Sequence{<:SequenceSpace}, n::Int, X::Ell1)\n\nCompute the discrete convolution (associated with space(a)) of a with itself n times. A cut-off order is estimated such that the coefficients of the output beyond this order are rigorously enclosed.\n\nSee also: banach_rounding_mul, banach_rounding_mul!, *(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}), mul!(::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Sequence{<:SequenceSpace}, ::Number, ::Number) and ^(::Sequence{<:SequenceSpace}, ::Int).\n\n\n\n\n\n","category":"function"}]
}
